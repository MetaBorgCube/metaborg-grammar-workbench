module lex

imports

  Common

context-free start-symbols

  Grammar

template options

  keyword -/- [0-9A-Za-z]
  ID = keyword {reject}
  tokenize : "({;"

context-free syntax

  Grammar.Grammar = <
                     <{Def "\n"}*>
                     %%
                     <{Rule "\n"}*><Tail?>
                    >

  // TODO start conditions, character tables, changes to internal array sizes,
  // TODO force newline between `Def.Name`s to avoid ambiguities (ID can be interpreted as Regex.Lit)
  Def.Name = <<ID> <Regex>>
  Def.Code     = <
                  %{
                      <CodeAnything>
                  %}
                 >

  Rule.RuleWithRHS = <<Regex> { <Statement*>return <ID>; }> {prefer}
  Rule.RuleWithError = <<Regex> { <Statement*>yyerror(<STRING>); }> {prefer}
  Rule.RuleWithLayout = <<Regex> { <Statement*>}>

  Regex.Any = "."
  Regex.Lit = LiteralChar
  Regex.Str = STRING
  Regex.Ref = <{<ID>}>
  Regex.Repeat = <<Regex>{<INT>,<INT>}>
  Regex.Or = <<Regex> | <Regex>> {right}
  Regex.Conc = <<Regex><Regex>> {right}
  Regex.Op = <<Regex><RegOperator>>
  Regex = <(<Regex>)> {bracket}

  Statement.Statement = <<StatementChars>; >

  Tail.Tail = <

               %%
               <TailAnything>
              >

context-free priorities

  {Regex.Op} >
  {Regex.CharClassNotHyphen Regex.CharClassNotBracket} >
  {Regex.CharClassNot Regex.CharClassNotHyphen Regex.CharClassBracket} >
  {Regex.CharClass} >
  {Regex.Conc} >
  {Regex.Or}

syntax

  // Note that character classes may not be empty, enforced with + in the non-Hyphen and non-Bracket cases
  // TODO if there is no RegOperator, []] or [^]] gives errors / ambiguities
  Regex-CF.CharClass = "[" {CharClassElem ""}+ Hyphen?-CF "]" {avoid}
  Regex-CF.CharClassHyphen = "[-" {CharClassElem ""}* "]"
  Regex-CF.CharClassBracket = "[]" {CharClassElem ""}* Hyphen?-CF "]"
  Regex-CF.CharClassNot = "[^" {CharClassElem ""}+ Hyphen?-CF "]"
  Regex-CF.CharClassNotHyphen = "[^-" {CharClassElem ""}* "]" {prefer}
  Regex-CF.CharClassNotBracket = "[^]" {CharClassElem ""}* Hyphen?-CF "]" {prefer}

  CharClassElem = CharClassElemShort-CF
  CharClassElem = CharClassElemRange-CF
  CharClassElemShort-CF.Short = CharClassChar-CF
  CharClassElemRange-CF.Range = CharClassElemShort-CF "-" CharClassElemShort-CF

lexical syntax

  CodeAnything = InsideCodeAnything*
  InsideCodeAnything = ~[\%]
  InsideCodeAnything = CodePercentChar
  CodePercentChar = "%"

  // List of operators source: http://dinosaur.compilertools.net/lex/index.html Section 3
  LiteralChar = [\32-\126] / [\"\\\[\]\^\-\?\.\*\+\|\(\)\$\/\{\}\%\<\>]
  LiteralChar = [\\] [\"\\\[\]\^\-\?\.\*\+\|\(\)\$\/\{\}\%\<\>nrt]
  RegOperator = [\*\+\?]

  Hyphen = "-"
  CharClassChar = ([\32-\126] / [\]\-\\]) | ("\\" [\\nrt])

  StatementChars = ~[\{\}\;]*

  TailAnything = (~[])*
