module lex

imports

  Common

context-free start-symbols

  Grammar

template options

  keyword -/- [0-9A-Za-z]
  ID = keyword {reject}
  tokenize : "({;"

context-free syntax

  // TODO named character classes before first %%
  // TODO glob all code after last %%
  Grammar.Grammar = <<{Rule "\n"}*>>

  Rule.RuleWithRHS = <<RegexElement*> { <Statement*>return <ID>; }> {prefer}
  Rule.RuleWithError = <<RegexElement*> { <Statement*>yyerror(<STRING>); }> {prefer}
  Rule.RuleWithLayout = <<RegexElement*> { <Statement*>}>

  RegexElement.Any = "."
  RegexElement.Lit = STRING
  RegexElement.Or = <<RegexElement> | <RegexElement>> {right}
  RegexElement.Sequence = <(<RegexElement> <RegexElement+>)>
  RegexElement = <(<RegexElement>)> {bracket}

  Statement.Statement = <<StatementChars>; >

context-free priorities

  {RegexElement.CharClassNotHyphen RegexElement.CharClassNotBracket} >
  {RegexElement.CharClassNot RegexElement.CharClassNotHyphen RegexElement.CharClassBracket} >
  {RegexElement.CharClass}

syntax

  // Note that character classes may not be empty, enforced with + in the non-Hyphen and non-Bracket cases
  // TODO if there is no RegOperator, []] or [^]] gives ambiguities
  RegexElement-CF.CharClass = "[" {CharClassElem ""}+ Hyphen?-CF "]" RegOperator?-CF {avoid}
  RegexElement-CF.CharClassHyphen = "[-" {CharClassElem ""}* "]" RegOperator?-CF
  RegexElement-CF.CharClassBracket = "[]" {CharClassElem ""}* Hyphen?-CF "]" RegOperator?-CF
  RegexElement-CF.CharClassNot = "[^" {CharClassElem ""}+ Hyphen?-CF "]" RegOperator?-CF
  RegexElement-CF.CharClassNotHyphen = "[^-" {CharClassElem ""}* "]" RegOperator?-CF {prefer}
  RegexElement-CF.CharClassNotBracket = "[^]" {CharClassElem ""}* Hyphen?-CF "]" RegOperator?-CF {prefer}

  CharClassElem = CharClassElemShort-CF
  CharClassElem = CharClassElemRange-CF
  CharClassElemShort-CF.Short = CharClassChar-CF
  CharClassElemRange-CF.Range = CharClassElemShort-CF "-" CharClassElemShort-CF

lexical syntax

  Hyphen = "-"
  RegOperator = [\*\+\?]

  StatementChars = ~[\{\}\;]*
  CharClassChar = ([\32-\126] / [\]\-\\]) | ("\\" [\\nrt])
