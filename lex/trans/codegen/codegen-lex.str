module codegen/codegen-lex

imports

  nabl2/api
  libspoofax/stratego/debug
  codegen/-
  signatures/lex-sig
  signatures/modules/-

rules

  /** @type LEX AST -> SDF3 ContextFreeSyntax */
  lex-to-sdf3: Grammar(productionRules) -> Module(
      Unparameterized("test-lex") // TODO rename module in build.str
    , []
    , [ SDFSection(
          LexicalSyntax(<map(rule-to-sdf3)> productionRules)
        )
      ]
    )

  lex-to-sdf3: Grammar(que) -> <debug0> Grammar(que)

  /** @type Rule(ID, List(RHS)) -> SdfProduction */
  rule-to-sdf3: RuleWithRHS(lhss, _, rhs) -> SdfProduction(
          SortDef(<capitalize-string> rhs), Rhs(<map(lhs-to-sdf3)> lhss), NoAttrs())
  // TODO transform other rules (error, layout, more?)

  rule-to-sdf3: a -> <debug1> a

  /** @type CharClass(hyphenL, ranges, hyphenR, regOperator) | Any() | Lit(str) -> sdf3.CharClass */
  lhs-to-sdf3: CharClass(None(), ranges, Some("-"), regOperator) ->
          <charclass-to-sdf3> (<concat> [ranges, [Short("\\-")]], regOperator)
  lhs-to-sdf3: CharClass(Some("-"), ranges, None(), regOperator) ->
          <charclass-to-sdf3> ([Short("\\-") | ranges], regOperator)
  lhs-to-sdf3: CharClass(None(), ranges, None(), regOperator) ->
          <charclass-to-sdf3> (ranges, regOperator)
  lhs-to-sdf3: Any() -> CharClass(Comp(Simple(Absent())))
  lhs-to-sdf3: Lit(str) -> Lit(str)

  lhs-to-sdf3: a -> <debug2> a

  /** @type (ranges, regOperator) -> sdf3.CharClass */
  charclass-to-sdf3: (ranges, None()) ->
          CharClass(Simple(Present(<charranges-to-sdf3> ranges)))

  /** @type List(Range | Single) -> List(sdf3.Range | sdf3.Short) */
  charranges-to-sdf3: [h] -> h
  charranges-to-sdf3: [h | t] -> Conc(h, <charranges-to-sdf3> t)

  charranges-to-sdf3: a -> <debug3> a

  /**
   * Capitalizes the first string of the character
   *
   * @type String -> String
   * @fails Never
   */
  capitalize-string: string -> res
    with [h|tail] := <explode-string> string
       ; derp := <if id then id else id end> h
       ; newH := <to-upper> h
       ; res := <implode-string> [newH|tail]
