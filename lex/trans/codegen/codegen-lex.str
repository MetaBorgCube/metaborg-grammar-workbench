module codegen/codegen-lex

imports

  nabl2/api
  libspoofax/stratego/debug
  signatures/TemplateLang-sig

  signatures/lex-sig
  codegen/-

rules

  /**
   * Converts the LEX Grammar to an SDF3 modules that contains at least a `lexical syntax` section.
   * Documentation notes about the constructors used in [at]type:
   * - Non-prefixed constructors originate from LEX.
   * - Constructors prefixed with `SDF3.` originate from SDF3.
   * - Primitive types are lowercase (e.g. string or int).
   *
   * @type Grammar -> SDF3.Module
   */
  lex-to-sdf3: Grammar(productionRules) -> Module(
      Unparameterized("test-lex")
    , []
    , [ SDFSection(LexicalSyntax(<mapconcat(rule-to-sdf3)> productionRules)) ]
    )

  /** @type Rule(ID, List(RHS)) -> SDF3.SdfProduction */
  rule-to-sdf3: RuleWithRHS(lhss, _, rhs) -> [SdfProduction(
          SortDef(<capitalize-string> rhs), Rhs(<map(lhs-to-sdf3)> lhss), NoAttrs())]
  rule-to-sdf3: RuleWithLayout(lhss, _) -> [SdfProduction(
          Layout(), Rhs(<map(lhs-to-sdf3)> lhss), NoAttrs())]
  rule-to-sdf3: RuleWithError(lhss, _, _) -> [] // TODO do we really want to ignore the error?

  /** @type CharClass(hyphenL, ranges, hyphenR, regOperator) | Any() | Lit(str) -> SDF3.CharClass */
  lhs-to-sdf3: CharClass(None(), ranges, Some("-"), regOperator) ->
          <charclass-to-sdf3> (<concat> [ranges, [Short("\\-")]], regOperator)
  lhs-to-sdf3: CharClass(Some("-"), ranges, None(), regOperator) ->
          <charclass-to-sdf3> ([Short("\\-") | ranges], regOperator)
  lhs-to-sdf3: CharClass(None(), ranges, None(), regOperator) ->
          <charclass-to-sdf3> (ranges, regOperator)
  lhs-to-sdf3: Any() -> CharClass(Comp(Simple(Absent())))
  lhs-to-sdf3: Lit(str) -> Lit(str)

  // TODO union, parentheses, etc.

  /** @type (ranges, regOperator) -> SDF3.{CharClass | Opt(CharClass) | Iter(CharClass) | IterStar(CharClass)} */
  charclass-to-sdf3: ([], None()) -> CharClass(Simple(Absent()))
  charclass-to-sdf3: (ranges, None()) -> CharClass(Simple(Present(<charranges-to-sdf3> ranges)))
  charclass-to-sdf3: (ranges, Some("?")) -> Opt(<charclass-to-sdf3> (ranges, None()))
  charclass-to-sdf3: (ranges, Some("+")) -> Iter(<charclass-to-sdf3> (ranges, None()))
  charclass-to-sdf3: (ranges, Some("*")) -> IterStar(<charclass-to-sdf3> (ranges, None()))

  /** @type List(Range | Short){length > 0} -> List(SDF3.Range | SDF3.Short) */
  charranges-to-sdf3: [h] -> <charrange-to-sdf3> h
  charranges-to-sdf3: [h | t] -> Conc(<charrange-to-sdf3> h, <charranges-to-sdf3> t)

  /** @type Range | Short -> SDF3.Range | SDF3.Short */
  charrange-to-sdf3: Short(c) -> Short(<ensure-char-escape> c)
  charrange-to-sdf3: Range(a, b) -> Range(<charrange-to-sdf3> a, <charrange-to-sdf3> b)

  /**
   * If character is not alphanumeric or already escaped, escape it with a backslash
   * @type string -> string
   */
  ensure-char-escape: c -> escaped
    with [h|tail] := <explode-string> c
       ; newH := <(is-alphanum + (?'\';!'\')) < ![h] + !['\', h]> h
       ; escaped := <implode-string> <concat> [newH, tail]

  /**
   * Capitalizes the first string of the character
   *
   * @type string -> string
   * @fails Never
   */
  capitalize-string: string -> res
    with [h|tail] := <explode-string> string
       ; newH := <to-upper> h
       ; res := <implode-string> [newH|tail]
