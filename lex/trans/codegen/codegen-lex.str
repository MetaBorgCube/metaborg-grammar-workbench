module codegen/codegen-lex

imports

  nabl2/api
  libspoofax/stratego/debug
  signatures/TemplateLang-sig

  signatures/lex-sig
  codegen/-

rules

  /**
   * Converts the LEX Grammar to an SDF3 modules that contains at least a `lexical syntax` section.
   * Documentation notes about the constructors used in [at]type:
   * - Non-prefixed constructors originate from LEX.
   * - Constructors prefixed with `SDF3.` originate from SDF3.
   * - Primitive types are lowercase (e.g. string or int).
   *
   * @type Grammar -> SDF3.Module
   */
  lex-to-sdf3: Grammar(Definitions(definitions), Rules(productionRules), _) -> Module(
      Unparameterized("test-lex")
    , []
    , [ SDFSection(LexicalSyntax(
          <conc> (<mapconcat(def-to-sdf3)> definitions, <mapconcat(rule-to-sdf3)> productionRules)
        ))
      ]
    )

  def-to-sdf3: Code(_) -> []
  def-to-sdf3: Name(name, regex) -> [SdfProduction(
          SortDef(<id-to-sdf3> name), Rhs(<seq-to-list> <regex-to-sdf3> regex), NoAttrs())]

  /** @type Rule(Regex.*, Statement-list) -> SDF3.SdfProduction */
  rule-to-sdf3: Rule(regex, statements) -> [SdfProduction(
            SortDef(<id-to-sdf3> <find-return> statements), Rhs(<seq-to-list> <regex-to-sdf3> regex), NoAttrs()
          )]
  rule-to-sdf3: Rule(regex, _) -> [SdfProduction(
            Layout(), Rhs(<seq-to-list> <regex-to-sdf3> regex), NoAttrs()
          )]

  find-return = collect-all({s: (Jump-statement5(_, s) -> s)}) ; last
              ; collect-all({s: (Primary-expression1(s) -> s)}) ; last

  /** @type Regex.* -> SDF3.Symbol.* */
  regex-to-sdf3: CharClass([], None())            -> CharClass(Simple(Absent()))
  regex-to-sdf3: CharClass(ranges, None())        -> CharClass(Simple(Present(<charranges-to-sdf3> ranges)))
  regex-to-sdf3: CharClass(ranges, Some("-"))     -> <regex-to-sdf3> CharClass(<conc> (ranges, [Short("\\-")]), None())
  regex-to-sdf3: CharClassHyphen(ranges)          -> <regex-to-sdf3> CharClass([Short("\\-") | ranges], None())
  regex-to-sdf3: CharClassBracket(ranges, hyphen) -> <regex-to-sdf3> CharClass([Short("\\]") | ranges], hyphen)

  regex-to-sdf3: CharClassNot([], None())         -> CharClass(Comp(Simple(Absent())))
  regex-to-sdf3: CharClassNot(ranges, None())     -> CharClass(Comp(Simple(Present(<charranges-to-sdf3> ranges))))
  regex-to-sdf3: CharClassNot(ranges, Some("-"))  -> <regex-to-sdf3> CharClassNot(<conc> (ranges, [Short("\\-")]), None())
  regex-to-sdf3: CharClassNotHyphen(ranges)       -> <regex-to-sdf3> CharClassNot([Short("\\-") | ranges], None())
  regex-to-sdf3: CharClassNotBracket(ranges, hyphen) -> <regex-to-sdf3> CharClassNot([Short("\\]") | ranges], hyphen)

  regex-to-sdf3: Any()      -> CharClass(Comp(Simple(Present(Short("\\n")))))
  regex-to-sdf3: Lit(char)  -> CharClass(Simple(Present(Short(<ensure-char-escape> char))))
  regex-to-sdf3: Str(str)   -> Lit(str)
  regex-to-sdf3: Ref(ID)    -> Sort(ID)
  regex-to-sdf3: Or(l, r)   -> Alt(<regex-to-sdf3> l, <regex-to-sdf3> r)
  regex-to-sdf3: Op(r, "?") -> Opt(<regex-to-sdf3> r)
  regex-to-sdf3: Op(r, "+") -> Iter(<regex-to-sdf3> r)
  regex-to-sdf3: Op(r, "*") -> IterStar(<regex-to-sdf3> r)
  regex-to-sdf3: Conc(h, t) -> Sequence(<regex-to-sdf3> h, <seq-to-list> <regex-to-sdf3> t)
  regex-to-sdf3: Repeat(r, a, b) -> <repeat-to-sdf3> (<regex-to-sdf3> r, <string-to-int> a, <string-to-int> b)

  /** @type List(Range | Short){length > 0} -> List(SDF3.Range | SDF3.Short) */
  charranges-to-sdf3: [h] -> <charrange-to-sdf3> h
  charranges-to-sdf3: [h | t] -> Conc(<charrange-to-sdf3> h, <charranges-to-sdf3> t)

  /** @type Range | Short -> SDF3.Range | SDF3.Short */
  charrange-to-sdf3: Short(c) -> Short(<ensure-char-escape> c)
  charrange-to-sdf3: Range(a, b) -> Range(<charrange-to-sdf3> a, <charrange-to-sdf3> b)

  /**
   * Repeats an SDF3 symbol first `a` times, and then optionally `b` times. 
   * @type (SDF3.Symbol.*, int, int) -> SDF.Symbol.*
   */
  repeat-to-sdf3: (r, 0, 0) -> CharClass(Simple(Absent()))
  repeat-to-sdf3: (r, 0, b) -> <repeat-to-sdf3> (Opt(r), b, b)
  repeat-to-sdf3: (r, 1, 1) -> r
  repeat-to-sdf3: (r, a, b) -> Sequence(r, <seq-to-list> <repeat-to-sdf3> (r, <dec> a, <dec> b))

  /**
   * Converts an SDF3.Symbol.* to a stratego List.
   * If the symbol is a sequence, it is converted to a head-tail list containing the elements of that sequence.
   * If the symbol is not a sequence, it is converted to a singleton list that contains this symbol.
   * @type SDF3.Symbol.* -> List(SDF3.Symbol.*)
   */
  seq-to-list: Sequence(l, r) -> [l | r]
  seq-to-list: a -> [a]

strategies

  /**
   * If the one-character string is not alphanumeric or already escaped, then escape it with a backslash
   *
   * @type string -> string
   * @fails If the input string is empty
   */
  ensure-char-escape = explode-string
                     ; ?[h | tail]
                     ; !h
                     ; if is-alphanum + equal(|'\') then ![<id>] else !['\', <id>] end
                     ; !(<id>, tail)
                     ; conc
                     ; implode-string

  /**
   * Capitalizes the first string of the character and replaces underscore with hyphens.
   *
   * @type string -> string
   * @fails If the input string is empty
   */
  id-to-sdf3 = explode-string ; ?[h | tail] ; ![<to-upper> h | tail] ; implode-string
             ; while(where(is-substring(!"_")), string-replace(|"_", "-"))
