module bigFiles

language yacc



test list of numbers [[
%%
    list : number
         | list number
         ;
]] run generate-sdf3-test to
  "module test

imports
  test-lex

context-free start-symbols

  List

context-free syntax

  List.List1 = Number
  List.List2 = List Number
"



test example [[
    // Taken from http://www.cs.man.ac.uk/~pjj/cs212/ex5_hint.html
    %start file
    %token school group module name
    %%
    file	: student
            | file student
            ;
    student	: school group name modules
            ;
    modules	:
            | modules module
            ;
    %%
    int trace=0;
]] run generate-sdf3-test to
  "module test

imports
  test-lex

context-free start-symbols

  File

context-free syntax

  File.File1 = Student
  File.File2 = File Student
  Student.Student = School Group Name Modules
  Modules.Modules1 = \"\"
  Modules.Modules2 = Modules Module
"



test arith [[
// Taken from http://dinosaur.compilertools.net/yacc/ Appendix A
%{
#  include  <stdio.h>
#  include  <ctype.h>

int  regs[26];
int  base;

%}

%start  list

%token  DIGIT  LETTER

%left  '|'
%left  '&'
%left  '+'  '-'
%left  '*'  '/'  '%'
%left  UMINUS      /*  supplies  precedence  for  unary  minus  */

%%      /*  beginning  of  rules  section  */

list :    /*  empty  */
     |    list  stat  '\n'
     |    list  error  '\n'
               {    yyerrok;  }
     ;

stat :    expr
               {    printf( "%d\n", $1 );  }
     |    LETTER  '='  expr
               {    regs[$1]  =  $3;  }
     ;


expr :    '('  expr  ')'
               {    $$  =  $2;  }
     |    expr  '+'  expr
               {    $$  =  $1  +  $3;  }
     |    expr  '-'  expr
               {    $$  =  $1  -  $3;  }
     |    expr  '*'  expr
               {    $$  =  $1  *  $3;  }
     |    expr  '/'  expr
               {    $$  =  $1  /  $3;  }
     |    expr  '%'  expr
               {    $$  =  $1  %  $3;  }
     |    expr  '&'  expr
               {    $$  =  $1  &  $3;  }
     |    expr  '|'  expr
               {    $$  =  $1  |  $3;  }
     |    '-'  expr        %prec  UMINUS
               {    $$  =  -  $2;  }
     |    LETTER
               {    $$  =  regs[$1];  }
     |    number
     ;

number    :    DIGIT
               {    $$ = $1;    base  =  ($1==0)  ?  8  :  10;  }
     |    number  DIGIT
               {    $$  =  base * $1  +  $2;  }
     ;

%%      /*  start  of  programs  */

yylex() {      /*  lexical  analysis  routine  */
              /*  returns  LETTER  for  a  lower  case  letter,  yylval = 0  through  25  */
              /*  return  DIGIT  for  a  digit,  yylval = 0  through  9  */
              /*  all  other  characters  are  returned  immediately  */

     int  c;

     while(  (c=getchar())  ==  ' '  )  {/*  skip  blanks  */  }

     /*  c  is  now  nonblank  */

     if(  islower(  c  )  )  {
          yylval  =  c  -  'a';
          return  (  LETTER  );
          }
     if(  isdigit(  c  )  )  {
          yylval  =  c  -  '0';
          return(  DIGIT  );
          }
     return(  c  );
     }
]] run generate-sdf3-test to "module test

imports
  test-lex

context-free start-symbols

  List

context-free priorities

  {left :
    Expr.Expr9} > {left :
    Expr.Expr4
    Expr.Expr5
    Expr.Expr6} > {left :
    Expr.Expr2
    Expr.Expr3} > {left :
    Expr.Expr7} > {left :
    Expr.Expr8}

context-free syntax

  List.List1 = \"\"
  List.List2 = List Stat \"\n\"
  Stat.Stat1 = Expr
  Stat.Stat2 = LETTER \"=\" Expr
  Expr.Expr1 = \"(\" Expr \")\"
  Expr.Expr2 = Expr \"+\" Expr
  Expr.Expr3 = Expr \"-\" Expr
  Expr.Expr4 = Expr \"*\" Expr
  Expr.Expr5 = Expr \"/\" Expr
  Expr.Expr6 = Expr \"%\" Expr
  Expr.Expr7 = Expr \"&\" Expr
  Expr.Expr8 = Expr \"|\" Expr
  Expr.Expr9 = \"-\" Expr
  Expr.Expr10 = LETTER
  Expr.Expr11 = Number
  Number.Number1 = DIGIT
  Number.Number2 = Number DIGIT
"



test interval [[
// Taken from http://dinosaur.compilertools.net/yacc/ Appendix C
%{

#  include  <stdio.h>
#  include  <ctype.h>

typedef  struct  interval  {
        double  lo,  hi;
        }  INTERVAL;

INTERVAL  vmul(),  vdiv();

double  atof();

double  dreg[ 26 ];
INTERVAL  vreg[ 26 ];

%}

%start    lines

%union    {
        int  ival;
        double  dval;
        INTERVAL  vval;
        }

%token  <ival>  DREG  VREG      /*  indices  into  dreg,  vreg  arrays  */

%token  <dval>  CONST           /*  floating  point  constant  */

%type  <dval>  dexp             /*  expression  */

%type  <vval>  vexp             /*  interval  expression  */

        /*  precedence  information  about  the  operators  */

%left   '+'  '-'
%left   '*'  '/'
%left   UMINUS        /*  precedence  for  unary  minus  */

%%

lines   :       /*  empty  */
        |       lines  line
        ;

line    :       dexp  '\n'
                        {       printf(  "%15.8f\n",  $1  );  }
        |       vexp  '\n'
                        {       printf(  "(%15.8f  ,  %15.8f  )\n",  $1.lo,  $1.hi  );  }
        |       DREG  '='  dexp  '\n'
                        {       dreg[$1]  =  $3;  }
        |       VREG  '='  vexp  '\n'
                        {       vreg[$1]  =  $3;  }
        |       error  "\n"
                        {       yyerrok;  }
        ;

dexp    :       CONST
        |       DREG
                        {       $$  =  dreg[$1];  }
        |       dexp  '+'  dexp
                        {       $$  =  $1  +  $3;  }
        |       dexp  '-'  dexp
                        {       $$  =  $1  -  $3;  }
        |       dexp  '*'  dexp
                        {       $$  =  $1  *  $3;  }
        |       dexp  '/'  dexp
                        {       $$  =  $1  /  $3;  }
        |       '-'  dexp       %prec  UMINUS
                        {       $$  =  - $2;  }
        |       '('  dexp  ')'
                        {       $$  =  $2;  }
        ;

vexp    :       dexp
                        {       $$.hi  =  $$.lo  =  $1;  }
        |       '('  dexp  ','  dexp  ')'
                        {
                        $$.lo  =  $2;
                        $$.hi  =  $4;
                        if(  $$.lo  >  $$.hi  ){
                                printf(  "interval  out  of  order\n"  );
                                YYERROR;
                                }
                        }
        |       VREG
                        {       $$  =  vreg[$1];    }
        |       vexp  '+'  vexp
                        {       $$.hi  =  $1.hi  +  $3.hi;
                                $$.lo  =  $1.lo  +  $3.lo;    }
        |       dexp  '+'  vexp
                        {       $$.hi  =  $1  +  $3.hi;
                                $$.lo  =  $1  +  $3.lo;    }
        |       vexp  '-'  vexp
                        {       $$.hi  =  $1.hi  -  $3.lo;
                                $$.lo  =  $1.lo  -  $3.hi;    }
        |       dexp  '-'  vexp
                        {       $$.hi  =  $1  -  $3.lo;
                                $$.lo  =  $1  -  $3.hi;    }
        |       vexp  '*'  vexp
                        {       $$  =  vmul(  $1.lo,  $1.hi,  $3  );  }
        |       dexp  '*'  vexp
                        {       $$  =  vmul(  $1,  $1,  $3  );  }
        |       vexp  '/'  vexp
                        {       if(  dcheck(  $3  )  )  YYERROR;
                                $$  =  vdiv(  $1.lo,  $1.hi,  $3  );  }
        |       dexp  '/'  vexp
                        {       if(  dcheck(  $3  )  )  YYERROR;
                                $$  =  vdiv(  $1,  $1,  $3  );  }
        |       '-'  vexp       %prec  UMINUS
                        {       $$.hi  =  -$2.lo;    $$.lo  =  -$2.hi;    }
        |       '('  vexp  ')'
                        {       $$  =  $2;  }
        ;

%%

#  define  BSZ  50        /*  buffer  size  for  floating  point  numbers  */

        /*  lexical  analysis  */

yylex(){
        register  c;

        while(  (c=getchar())  ==  ' '  ){  /*  skip  over  blanks  */  }

        if(  isupper(  c  )  ){
                yylval.ival  =  c  -  'A';
                return(  VREG  );
                }
        if(  islower(  c  )  ){
                yylval.ival  =  c  -  'a';
                return(  DREG  );
                }

        if(  isdigit(  c  )  ||  c=='.'  ){
                /*  gobble  up  digits,  points,  exponents  */

                char  buf[BSZ+1],  *cp  =  buf;
                int  dot  =  0,  exp  =  0;

                for(  ;  (cp-buf)<BSZ  ;  ++cp,c=getchar()  ){

                        *cp  =  c;
                        if(  isdigit(  c  )  )  continue;
                        if(  c  ==  '.'  ){
                                if(  dot++  ||  exp  )  return(  '.'  );    /*  will  cause  syntax  error  */
                                continue;
                                }

                        if(  c  ==  'e'  ){
                                if(  exp++  )  return(  'e'  );    /*  will  cause  syntax  error  */
                                continue;
                                }

                        /*  end  of  number  */
                        break;
                        }
                *cp  =  '\0';

                if(  (cp-buf)  >=  BSZ  )  printf(  "constant  too  long:  truncated\n"  );
                else  ungetc(  c,  stdin  );    /*  push  back  last  char  read  */
                yylval.dval  =  atof(  buf  );
                return(  CONST  );
                }
        return(  c  );
        }

INTERVAL  hilo(  a,  b,  c,  d  )  double  a,  b,  c,  d;  {
        /*  returns  the  smallest  interval  containing  a,  b,  c,  and  d  */
        /*  used  by  *,  /  routines  */
        INTERVAL  v;

        if(  a>b  )  {  v.hi  =  a;    v.lo  =  b;  }
        else  {  v.hi  =  b;    v.lo  =  a;  }

        if(  c>d  )  {
                if(  c>v.hi  )  v.hi  =  c;
                if(  d<v.lo  )  v.lo  =  d;
                }
        else  {
                if(  d>v.hi  )  v.hi  =  d;
                if(  c<v.lo  )  v.lo  =  c;
                }
        return(  v  );
        }

INTERVAL  vmul(  a,  b,  v  )  double  a,  b;    INTERVAL  v;  {
        return(  hilo(  a*v.hi,  a*v.lo,  b*v.hi,  b*v.lo  )  );
        }

dcheck(  v  )  INTERVAL  v;  {
        if(  v.hi  >=  0.  &&  v.lo  <=  0.  ){
                printf(  "divisor  interval  contains  0.\n"  );
                return(  1  );
                }
        return(  0  );
        }

INTERVAL  vdiv(  a,  b,  v  )  double  a,  b;    INTERVAL  v;  {
        return(  hilo(  a/v.hi,  a/v.lo,  b/v.hi,  b/v.lo  )  );
        }
]] run generate-sdf3-test to "module test

imports
  test-lex

context-free start-symbols

  Lines

context-free priorities

  {left :
    Dexp.Dexp7
    Vexp.Vexp12} > {left :
    Dexp.Dexp5
    Vexp.Vexp8
    Vexp.Vexp9
    Dexp.Dexp6
    Vexp.Vexp10
    Vexp.Vexp11} > {left :
    Dexp.Dexp3
    Vexp.Vexp4
    Vexp.Vexp5
    Dexp.Dexp4
    Vexp.Vexp6
    Vexp.Vexp7}

context-free syntax

  Lines.Lines1 = \"\"
  Lines.Lines2 = Lines Line
  Line.Line1 = Dexp \"\n\"
  Line.Line2 = Vexp \"\n\"
  Line.Line3 = DREG \"=\" Dexp \"\n\"
  Line.Line4 = VREG \"=\" Vexp \"\n\"
  Dexp.Dexp1 = CONST
  Dexp.Dexp2 = DREG
  Dexp.Dexp3 = Dexp \"+\" Dexp
  Dexp.Dexp4 = Dexp \"-\" Dexp
  Dexp.Dexp5 = Dexp \"*\" Dexp
  Dexp.Dexp6 = Dexp \"/\" Dexp
  Dexp.Dexp7 = \"-\" Dexp
  Dexp.Dexp8 = \"(\" Dexp \")\"
  Vexp.Vexp1 = Dexp
  Vexp.Vexp2 = \"(\" Dexp \",\" Dexp \")\"
  Vexp.Vexp3 = VREG
  Vexp.Vexp4 = Vexp \"+\" Vexp
  Vexp.Vexp5 = Dexp \"+\" Vexp
  Vexp.Vexp6 = Vexp \"-\" Vexp
  Vexp.Vexp7 = Dexp \"-\" Vexp
  Vexp.Vexp8 = Vexp \"*\" Vexp
  Vexp.Vexp9 = Dexp \"*\" Vexp
  Vexp.Vexp10 = Vexp \"/\" Vexp
  Vexp.Vexp11 = Dexp \"/\" Vexp
  Vexp.Vexp12 = \"-\" Vexp
  Vexp.Vexp13 = \"(\" Vexp \")\"
"

test C [[
%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN TYPE_NAME

%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM ELLIPSIS

%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

%start translation_unit
%%

primary_expression
    : IDENTIFIER
    | CONSTANT
    | STRING_LITERAL
    | '(' expression ')'
    ;

postfix_expression
    : primary_expression
    | postfix_expression '[' expression ']'
    | postfix_expression '(' ')'
    | postfix_expression '(' argument_expression_list ')'
    | postfix_expression '.' IDENTIFIER
    | postfix_expression PTR_OP IDENTIFIER
    | postfix_expression INC_OP
    | postfix_expression DEC_OP
    ;

argument_expression_list
    : assignment_expression
    | argument_expression_list ',' assignment_expression
    ;

unary_expression
    : postfix_expression
    | INC_OP unary_expression
    | DEC_OP unary_expression
    | unary_operator cast_expression
    | SIZEOF unary_expression
    | SIZEOF '(' type_name ')'
    ;

unary_operator
    : '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'
    ;

cast_expression
    : unary_expression
    | '(' type_name ')' cast_expression
    ;

multiplicative_expression
    : cast_expression
    | multiplicative_expression '*' cast_expression
    | multiplicative_expression '/' cast_expression
    | multiplicative_expression '%' cast_expression
    ;

additive_expression
    : multiplicative_expression
    | additive_expression '+' multiplicative_expression
    | additive_expression '-' multiplicative_expression
    ;

shift_expression
    : additive_expression
    | shift_expression LEFT_OP additive_expression
    | shift_expression RIGHT_OP additive_expression
    ;

relational_expression
    : shift_expression
    | relational_expression '<' shift_expression
    | relational_expression '>' shift_expression
    | relational_expression LE_OP shift_expression
    | relational_expression GE_OP shift_expression
    ;

equality_expression
    : relational_expression
    | equality_expression EQ_OP relational_expression
    | equality_expression NE_OP relational_expression
    ;

and_expression
    : equality_expression
    | and_expression '&' equality_expression
    ;

exclusive_or_expression
    : and_expression
    | exclusive_or_expression '^' and_expression
    ;

inclusive_or_expression
    : exclusive_or_expression
    | inclusive_or_expression '|' exclusive_or_expression
    ;

logical_and_expression
    : inclusive_or_expression
    | logical_and_expression AND_OP inclusive_or_expression
    ;

logical_or_expression
    : logical_and_expression
    | logical_or_expression OR_OP logical_and_expression
    ;

conditional_expression
    : logical_or_expression
    | logical_or_expression '?' expression ':' conditional_expression
    ;

assignment_expression
    : conditional_expression
    | unary_expression assignment_operator assignment_expression
    ;

assignment_operator
    : '='
    | MUL_ASSIGN
    | DIV_ASSIGN
    | MOD_ASSIGN
    | ADD_ASSIGN
    | SUB_ASSIGN
    | LEFT_ASSIGN
    | RIGHT_ASSIGN
    | AND_ASSIGN
    | XOR_ASSIGN
    | OR_ASSIGN
    ;

expression
    : assignment_expression
    | expression ',' assignment_expression
    ;

constant_expression
    : conditional_expression
    ;

declaration
    : declaration_specifiers ';'
    | declaration_specifiers init_declarator_list ';'
    ;

declaration_specifiers
    : storage_class_specifier
    | storage_class_specifier declaration_specifiers
    | type_specifier
    | type_specifier declaration_specifiers
    | type_qualifier
    | type_qualifier declaration_specifiers
    ;

init_declarator_list
    : init_declarator
    | init_declarator_list ',' init_declarator
    ;

init_declarator
    : declarator
    | declarator '=' initializer
    ;

storage_class_specifier
    : TYPEDEF
    | EXTERN
    | STATIC
    | AUTO
    | REGISTER
    ;

type_specifier
    : VOID
    | CHAR
    | SHORT
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    | SIGNED
    | UNSIGNED
    | struct_or_union_specifier
    | enum_specifier
    | TYPE_NAME
    ;

struct_or_union_specifier
    : struct_or_union IDENTIFIER '{' struct_declaration_list '}'
    | struct_or_union '{' struct_declaration_list '}'
    | struct_or_union IDENTIFIER
    ;

struct_or_union
    : STRUCT
    | UNION
    ;

struct_declaration_list
    : struct_declaration
    | struct_declaration_list struct_declaration
    ;

struct_declaration
    : specifier_qualifier_list struct_declarator_list ';'
    ;

specifier_qualifier_list
    : type_specifier specifier_qualifier_list
    | type_specifier
    | type_qualifier specifier_qualifier_list
    | type_qualifier
    ;

struct_declarator_list
    : struct_declarator
    | struct_declarator_list ',' struct_declarator
    ;

struct_declarator
    : declarator
    | ':' constant_expression
    | declarator ':' constant_expression
    ;

enum_specifier
    : ENUM '{' enumerator_list '}'
    | ENUM IDENTIFIER '{' enumerator_list '}'
    | ENUM IDENTIFIER
    ;

enumerator_list
    : enumerator
    | enumerator_list ',' enumerator
    ;

enumerator
    : IDENTIFIER
    | IDENTIFIER '=' constant_expression
    ;

type_qualifier
    : CONST
    | VOLATILE
    ;

declarator
    : pointer direct_declarator
    | direct_declarator
    ;

direct_declarator
    : IDENTIFIER
    | '(' declarator ')'
    | direct_declarator '[' constant_expression ']'
    | direct_declarator '[' ']'
    | direct_declarator '(' parameter_type_list ')'
    | direct_declarator '(' identifier_list ')'
    | direct_declarator '(' ')'
    ;

pointer
    : '*'
    | '*' type_qualifier_list
    | '*' pointer
    | '*' type_qualifier_list pointer
    ;

type_qualifier_list
    : type_qualifier
    | type_qualifier_list type_qualifier
    ;


parameter_type_list
    : parameter_list
    | parameter_list ',' ELLIPSIS
    ;

parameter_list
    : parameter_declaration
    | parameter_list ',' parameter_declaration
    ;

parameter_declaration
    : declaration_specifiers declarator
    | declaration_specifiers abstract_declarator
    | declaration_specifiers
    ;

identifier_list
    : IDENTIFIER
    | identifier_list ',' IDENTIFIER
    ;

type_name
    : specifier_qualifier_list
    | specifier_qualifier_list abstract_declarator
    ;

abstract_declarator
    : pointer
    | direct_abstract_declarator
    | pointer direct_abstract_declarator
    ;

direct_abstract_declarator
    : '(' abstract_declarator ')'
    | '[' ']'
    | '[' constant_expression ']'
    | direct_abstract_declarator '[' ']'
    | direct_abstract_declarator '[' constant_expression ']'
    | '(' ')'
    | '(' parameter_type_list ')'
    | direct_abstract_declarator '(' ')'
    | direct_abstract_declarator '(' parameter_type_list ')'
    ;

initializer
    : assignment_expression
    | '{' initializer_list '}'
    | '{' initializer_list ',' '}'
    ;

initializer_list
    : initializer
    | initializer_list ',' initializer
    ;

statement
    : labeled_statement
    | compound_statement
    | expression_statement
    | selection_statement
    | iteration_statement
    | jump_statement
    ;

labeled_statement
    : IDENTIFIER ':' statement
    | CASE constant_expression ':' statement
    | DEFAULT ':' statement
    ;

compound_statement
    : '{' '}'
    | '{' statement_list '}'
    | '{' declaration_list '}'
    | '{' declaration_list statement_list '}'
    ;

declaration_list
    : declaration
    | declaration_list declaration
    ;

statement_list
    : statement
    | statement_list statement
    ;

expression_statement
    : ';'
    | expression ';'
    ;

selection_statement
    : IF '(' expression ')' statement
    | IF '(' expression ')' statement ELSE statement
    | SWITCH '(' expression ')' statement
    ;

iteration_statement
    : WHILE '(' expression ')' statement
    | DO statement WHILE '(' expression ')' ';'
    | FOR '(' expression_statement expression_statement ')' statement
    | FOR '(' expression_statement expression_statement expression ')' statement
    ;

jump_statement
    : GOTO IDENTIFIER ';'
    | CONTINUE ';'
    | BREAK ';'
    | RETURN ';'
    | RETURN expression ';'
    ;

translation_unit
    : external_declaration
    | translation_unit external_declaration
    ;

external_declaration
    : function_definition
    | declaration
    ;

function_definition
    : declaration_specifiers declarator declaration_list compound_statement
    | declaration_specifiers declarator compound_statement
    | declarator declaration_list compound_statement
    | declarator compound_statement
    ;

%%
#include <stdio.h>

extern char yytext[];
extern int column;

yyerror(s)
char *s;
{
    fflush(stdout);
    printf("\n%*s\n%*s\n", column, "^", column, s);
}
]] run generate-sdf3-test to "module test

imports
  test-lex

context-free start-symbols

  Translation-unit

context-free syntax

  Primary-expression.Primary-expression1 = IDENTIFIER
  Primary-expression.Primary-expression2 = CONSTANT
  Primary-expression.Primary-expression3 = STRING-LITERAL
  Primary-expression.Primary-expression4 = \"(\" Expression \")\"
  Postfix-expression.Postfix-expression1 = Primary-expression
  Postfix-expression.Postfix-expression2 = Postfix-expression \"[\" Expression \"]\"
  Postfix-expression.Postfix-expression3 = Postfix-expression \"(\" \")\"
  Postfix-expression.Postfix-expression4 = Postfix-expression \"(\" Argument-expression-list \")\"
  Postfix-expression.Postfix-expression5 = Postfix-expression \".\" IDENTIFIER
  Postfix-expression.Postfix-expression6 = Postfix-expression PTR-OP IDENTIFIER
  Postfix-expression.Postfix-expression7 = Postfix-expression INC-OP
  Postfix-expression.Postfix-expression8 = Postfix-expression DEC-OP
  Argument-expression-list.Argument-expression-list1 = Assignment-expression
  Argument-expression-list.Argument-expression-list2 = Argument-expression-list \",\" Assignment-expression
  Unary-expression.Unary-expression1 = Postfix-expression
  Unary-expression.Unary-expression2 = INC-OP Unary-expression
  Unary-expression.Unary-expression3 = DEC-OP Unary-expression
  Unary-expression.Unary-expression4 = Unary-operator Cast-expression
  Unary-expression.Unary-expression5 = SIZEOF Unary-expression
  Unary-expression.Unary-expression6 = SIZEOF \"(\" Type-name \")\"
  Unary-operator.Unary-operator1 = \"&\"
  Unary-operator.Unary-operator2 = \"*\"
  Unary-operator.Unary-operator3 = \"+\"
  Unary-operator.Unary-operator4 = \"-\"
  Unary-operator.Unary-operator5 = \"~\"
  Unary-operator.Unary-operator6 = \"!\"
  Cast-expression.Cast-expression1 = Unary-expression
  Cast-expression.Cast-expression2 = \"(\" Type-name \")\" Cast-expression
  Multiplicative-expression.Multiplicative-expression1 = Cast-expression
  Multiplicative-expression.Multiplicative-expression2 = Multiplicative-expression \"*\" Cast-expression
  Multiplicative-expression.Multiplicative-expression3 = Multiplicative-expression \"/\" Cast-expression
  Multiplicative-expression.Multiplicative-expression4 = Multiplicative-expression \"%\" Cast-expression
  Additive-expression.Additive-expression1 = Multiplicative-expression
  Additive-expression.Additive-expression2 = Additive-expression \"+\" Multiplicative-expression
  Additive-expression.Additive-expression3 = Additive-expression \"-\" Multiplicative-expression
  Shift-expression.Shift-expression1 = Additive-expression
  Shift-expression.Shift-expression2 = Shift-expression LEFT-OP Additive-expression
  Shift-expression.Shift-expression3 = Shift-expression RIGHT-OP Additive-expression
  Relational-expression.Relational-expression1 = Shift-expression
  Relational-expression.Relational-expression2 = Relational-expression \"<\" Shift-expression
  Relational-expression.Relational-expression3 = Relational-expression \">\" Shift-expression
  Relational-expression.Relational-expression4 = Relational-expression LE-OP Shift-expression
  Relational-expression.Relational-expression5 = Relational-expression GE-OP Shift-expression
  Equality-expression.Equality-expression1 = Relational-expression
  Equality-expression.Equality-expression2 = Equality-expression EQ-OP Relational-expression
  Equality-expression.Equality-expression3 = Equality-expression NE-OP Relational-expression
  And-expression.And-expression1 = Equality-expression
  And-expression.And-expression2 = And-expression \"&\" Equality-expression
  Exclusive-or-expression.Exclusive-or-expression1 = And-expression
  Exclusive-or-expression.Exclusive-or-expression2 = Exclusive-or-expression \"^\" And-expression
  Inclusive-or-expression.Inclusive-or-expression1 = Exclusive-or-expression
  Inclusive-or-expression.Inclusive-or-expression2 = Inclusive-or-expression \"|\" Exclusive-or-expression
  Logical-and-expression.Logical-and-expression1 = Inclusive-or-expression
  Logical-and-expression.Logical-and-expression2 = Logical-and-expression AND-OP Inclusive-or-expression
  Logical-or-expression.Logical-or-expression1 = Logical-and-expression
  Logical-or-expression.Logical-or-expression2 = Logical-or-expression OR-OP Logical-and-expression
  Conditional-expression.Conditional-expression1 = Logical-or-expression
  Conditional-expression.Conditional-expression2 = Logical-or-expression \"?\" Expression \":\" Conditional-expression
  Assignment-expression.Assignment-expression1 = Conditional-expression
  Assignment-expression.Assignment-expression2 = Unary-expression Assignment-operator Assignment-expression
  Assignment-operator.Assignment-operator1 = \"=\"
  Assignment-operator.Assignment-operator2 = MUL-ASSIGN
  Assignment-operator.Assignment-operator3 = DIV-ASSIGN
  Assignment-operator.Assignment-operator4 = MOD-ASSIGN
  Assignment-operator.Assignment-operator5 = ADD-ASSIGN
  Assignment-operator.Assignment-operator6 = SUB-ASSIGN
  Assignment-operator.Assignment-operator7 = LEFT-ASSIGN
  Assignment-operator.Assignment-operator8 = RIGHT-ASSIGN
  Assignment-operator.Assignment-operator9 = AND-ASSIGN
  Assignment-operator.Assignment-operator10 = XOR-ASSIGN
  Assignment-operator.Assignment-operator11 = OR-ASSIGN
  Expression.Expression1 = Assignment-expression
  Expression.Expression2 = Expression \",\" Assignment-expression
  Constant-expression.Constant-expression = Conditional-expression
  Declaration.Declaration1 = Declaration-specifiers \";\"
  Declaration.Declaration2 = Declaration-specifiers Init-declarator-list \";\"
  Declaration-specifiers.Declaration-specifiers1 = Storage-class-specifier
  Declaration-specifiers.Declaration-specifiers2 = Storage-class-specifier Declaration-specifiers
  Declaration-specifiers.Declaration-specifiers3 = Type-specifier
  Declaration-specifiers.Declaration-specifiers4 = Type-specifier Declaration-specifiers
  Declaration-specifiers.Declaration-specifiers5 = Type-qualifier
  Declaration-specifiers.Declaration-specifiers6 = Type-qualifier Declaration-specifiers
  Init-declarator-list.Init-declarator-list1 = Init-declarator
  Init-declarator-list.Init-declarator-list2 = Init-declarator-list \",\" Init-declarator
  Init-declarator.Init-declarator1 = Declarator
  Init-declarator.Init-declarator2 = Declarator \"=\" Initializer
  Storage-class-specifier.Storage-class-specifier1 = TYPEDEF
  Storage-class-specifier.Storage-class-specifier2 = EXTERN
  Storage-class-specifier.Storage-class-specifier3 = STATIC
  Storage-class-specifier.Storage-class-specifier4 = AUTO
  Storage-class-specifier.Storage-class-specifier5 = REGISTER
  Type-specifier.Type-specifier1 = VOID
  Type-specifier.Type-specifier2 = CHAR
  Type-specifier.Type-specifier3 = SHORT
  Type-specifier.Type-specifier4 = INT
  Type-specifier.Type-specifier5 = LONG
  Type-specifier.Type-specifier6 = FLOAT
  Type-specifier.Type-specifier7 = DOUBLE
  Type-specifier.Type-specifier8 = SIGNED
  Type-specifier.Type-specifier9 = UNSIGNED
  Type-specifier.Type-specifier10 = Struct-or-union-specifier
  Type-specifier.Type-specifier11 = Enum-specifier
  Type-specifier.Type-specifier12 = TYPE-NAME
  Struct-or-union-specifier.Struct-or-union-specifier1 = Struct-or-union IDENTIFIER \"{\" Struct-declaration-list \"}\"
  Struct-or-union-specifier.Struct-or-union-specifier2 = Struct-or-union \"{\" Struct-declaration-list \"}\"
  Struct-or-union-specifier.Struct-or-union-specifier3 = Struct-or-union IDENTIFIER
  Struct-or-union.Struct-or-union1 = STRUCT
  Struct-or-union.Struct-or-union2 = UNION
  Struct-declaration-list.Struct-declaration-list1 = Struct-declaration
  Struct-declaration-list.Struct-declaration-list2 = Struct-declaration-list Struct-declaration
  Struct-declaration.Struct-declaration = Specifier-qualifier-list Struct-declarator-list \";\"
  Specifier-qualifier-list.Specifier-qualifier-list1 = Type-specifier Specifier-qualifier-list
  Specifier-qualifier-list.Specifier-qualifier-list2 = Type-specifier
  Specifier-qualifier-list.Specifier-qualifier-list3 = Type-qualifier Specifier-qualifier-list
  Specifier-qualifier-list.Specifier-qualifier-list4 = Type-qualifier
  Struct-declarator-list.Struct-declarator-list1 = Struct-declarator
  Struct-declarator-list.Struct-declarator-list2 = Struct-declarator-list \",\" Struct-declarator
  Struct-declarator.Struct-declarator1 = Declarator
  Struct-declarator.Struct-declarator2 = \":\" Constant-expression
  Struct-declarator.Struct-declarator3 = Declarator \":\" Constant-expression
  Enum-specifier.Enum-specifier1 = ENUM \"{\" Enumerator-list \"}\"
  Enum-specifier.Enum-specifier2 = ENUM IDENTIFIER \"{\" Enumerator-list \"}\"
  Enum-specifier.Enum-specifier3 = ENUM IDENTIFIER
  Enumerator-list.Enumerator-list1 = Enumerator
  Enumerator-list.Enumerator-list2 = Enumerator-list \",\" Enumerator
  Enumerator.Enumerator1 = IDENTIFIER
  Enumerator.Enumerator2 = IDENTIFIER \"=\" Constant-expression
  Type-qualifier.Type-qualifier1 = CONST
  Type-qualifier.Type-qualifier2 = VOLATILE
  Declarator.Declarator1 = Pointer Direct-declarator
  Declarator.Declarator2 = Direct-declarator
  Direct-declarator.Direct-declarator1 = IDENTIFIER
  Direct-declarator.Direct-declarator2 = \"(\" Declarator \")\"
  Direct-declarator.Direct-declarator3 = Direct-declarator \"[\" Constant-expression \"]\"
  Direct-declarator.Direct-declarator4 = Direct-declarator \"[\" \"]\"
  Direct-declarator.Direct-declarator5 = Direct-declarator \"(\" Parameter-type-list \")\"
  Direct-declarator.Direct-declarator6 = Direct-declarator \"(\" Identifier-list \")\"
  Direct-declarator.Direct-declarator7 = Direct-declarator \"(\" \")\"
  Pointer.Pointer1 = \"*\"
  Pointer.Pointer2 = \"*\" Type-qualifier-list
  Pointer.Pointer3 = \"*\" Pointer
  Pointer.Pointer4 = \"*\" Type-qualifier-list Pointer
  Type-qualifier-list.Type-qualifier-list1 = Type-qualifier
  Type-qualifier-list.Type-qualifier-list2 = Type-qualifier-list Type-qualifier
  Parameter-type-list.Parameter-type-list1 = Parameter-list
  Parameter-type-list.Parameter-type-list2 = Parameter-list \",\" ELLIPSIS
  Parameter-list.Parameter-list1 = Parameter-declaration
  Parameter-list.Parameter-list2 = Parameter-list \",\" Parameter-declaration
  Parameter-declaration.Parameter-declaration1 = Declaration-specifiers Declarator
  Parameter-declaration.Parameter-declaration2 = Declaration-specifiers Abstract-declarator
  Parameter-declaration.Parameter-declaration3 = Declaration-specifiers
  Identifier-list.Identifier-list1 = IDENTIFIER
  Identifier-list.Identifier-list2 = Identifier-list \",\" IDENTIFIER
  Type-name.Type-name1 = Specifier-qualifier-list
  Type-name.Type-name2 = Specifier-qualifier-list Abstract-declarator
  Abstract-declarator.Abstract-declarator1 = Pointer
  Abstract-declarator.Abstract-declarator2 = Direct-abstract-declarator
  Abstract-declarator.Abstract-declarator3 = Pointer Direct-abstract-declarator
  Direct-abstract-declarator.Direct-abstract-declarator1 = \"(\" Abstract-declarator \")\"
  Direct-abstract-declarator.Direct-abstract-declarator2 = \"[\" \"]\"
  Direct-abstract-declarator.Direct-abstract-declarator3 = \"[\" Constant-expression \"]\"
  Direct-abstract-declarator.Direct-abstract-declarator4 = Direct-abstract-declarator \"[\" \"]\"
  Direct-abstract-declarator.Direct-abstract-declarator5 = Direct-abstract-declarator \"[\" Constant-expression \"]\"
  Direct-abstract-declarator.Direct-abstract-declarator6 = \"(\" \")\"
  Direct-abstract-declarator.Direct-abstract-declarator7 = \"(\" Parameter-type-list \")\"
  Direct-abstract-declarator.Direct-abstract-declarator8 = Direct-abstract-declarator \"(\" \")\"
  Direct-abstract-declarator.Direct-abstract-declarator9 = Direct-abstract-declarator \"(\" Parameter-type-list \")\"
  Initializer.Initializer1 = Assignment-expression
  Initializer.Initializer2 = \"{\" Initializer-list \"}\"
  Initializer.Initializer3 = \"{\" Initializer-list \",\" \"}\"
  Initializer-list.Initializer-list1 = Initializer
  Initializer-list.Initializer-list2 = Initializer-list \",\" Initializer
  Statement.Statement1 = Labeled-statement
  Statement.Statement2 = Compound-statement
  Statement.Statement3 = Expression-statement
  Statement.Statement4 = Selection-statement
  Statement.Statement5 = Iteration-statement
  Statement.Statement6 = Jump-statement
  Labeled-statement.Labeled-statement1 = IDENTIFIER \":\" Statement
  Labeled-statement.Labeled-statement2 = CASE Constant-expression \":\" Statement
  Labeled-statement.Labeled-statement3 = DEFAULT \":\" Statement
  Compound-statement.Compound-statement1 = \"{\" \"}\"
  Compound-statement.Compound-statement2 = \"{\" Statement-list \"}\"
  Compound-statement.Compound-statement3 = \"{\" Declaration-list \"}\"
  Compound-statement.Compound-statement4 = \"{\" Declaration-list Statement-list \"}\"
  Declaration-list.Declaration-list1 = Declaration
  Declaration-list.Declaration-list2 = Declaration-list Declaration
  Statement-list.Statement-list1 = Statement
  Statement-list.Statement-list2 = Statement-list Statement
  Expression-statement.Expression-statement1 = \";\"
  Expression-statement.Expression-statement2 = Expression \";\"
  Selection-statement.Selection-statement1 = IF \"(\" Expression \")\" Statement
  Selection-statement.Selection-statement2 = IF \"(\" Expression \")\" Statement ELSE Statement
  Selection-statement.Selection-statement3 = SWITCH \"(\" Expression \")\" Statement
  Iteration-statement.Iteration-statement1 = WHILE \"(\" Expression \")\" Statement
  Iteration-statement.Iteration-statement2 = DO Statement WHILE \"(\" Expression \")\" \";\"
  Iteration-statement.Iteration-statement3 = FOR \"(\" Expression-statement Expression-statement \")\" Statement
  Iteration-statement.Iteration-statement4 = FOR \"(\" Expression-statement Expression-statement Expression \")\" Statement
  Jump-statement.Jump-statement1 = GOTO IDENTIFIER \";\"
  Jump-statement.Jump-statement2 = CONTINUE \";\"
  Jump-statement.Jump-statement3 = BREAK \";\"
  Jump-statement.Jump-statement4 = RETURN \";\"
  Jump-statement.Jump-statement5 = RETURN Expression \";\"
  Translation-unit.Translation-unit1 = External-declaration
  Translation-unit.Translation-unit2 = Translation-unit External-declaration
  External-declaration.External-declaration1 = Function-definition
  External-declaration.External-declaration2 = Declaration
  Function-definition.Function-definition1 = Declaration-specifiers Declarator Declaration-list Compound-statement
  Function-definition.Function-definition2 = Declaration-specifiers Declarator Compound-statement
  Function-definition.Function-definition3 = Declarator Declaration-list Compound-statement
  Function-definition.Function-definition4 = Declarator Compound-statement
"
