module bigFiles

language yacc



test list of numbers [[
%%
    list : number
         | list number
         ;
]] run generate-sdf3-trimmed to
  "module test

imports
  test-lex

context-free start-symbols

  List

context-free syntax

  List.List1 = Number
  List.List2 = List Number
"



test example [[
    // Taken from http://www.cs.man.ac.uk/~pjj/cs212/ex5_hint.html
    %start file
    %token school group module name
    %%
    file	: student
            | file student
            ;
    student	: school group name modules
            ;
    modules	:
            | modules module
            ;
    %%
    int trace=0;
]] run generate-sdf3-trimmed to
  "module test

imports
  test-lex

context-free start-symbols

  File

context-free syntax

  File.File1 = Student
  File.File2 = File Student
  Student.Student = School Group Name Modules
  Modules.Modules1 = \"\"
  Modules.Modules2 = Modules Module
"



test arith [[
// Taken from http://dinosaur.compilertools.net/yacc/ Appendix A
%{
#  include  <stdio.h>
#  include  <ctype.h>

int  regs[26];
int  base;

%}

%start  list

%token  DIGIT  LETTER

%left  '|'
%left  '&'
%left  '+'  '-'
%left  '*'  '/'  '%'
%left  UMINUS      /*  supplies  precedence  for  unary  minus  */

%%      /*  beginning  of  rules  section  */

list :    /*  empty  */
     |    list  stat  '\n'
     |    list  error  '\n'
               {    yyerrok;  }
     ;

stat :    expr
               {    printf( "%d\n", $1 );  }
     |    LETTER  '='  expr
               {    regs[$1]  =  $3;  }
     ;


expr :    '('  expr  ')'
               {    $$  =  $2;  }
     |    expr  '+'  expr
               {    $$  =  $1  +  $3;  }
     |    expr  '-'  expr
               {    $$  =  $1  -  $3;  }
     |    expr  '*'  expr
               {    $$  =  $1  *  $3;  }
     |    expr  '/'  expr
               {    $$  =  $1  /  $3;  }
     |    expr  '%'  expr
               {    $$  =  $1  %  $3;  }
     |    expr  '&'  expr
               {    $$  =  $1  &  $3;  }
     |    expr  '|'  expr
               {    $$  =  $1  |  $3;  }
     |    '-'  expr        %prec  UMINUS
               {    $$  =  -  $2;  }
     |    LETTER
               {    $$  =  regs[$1];  }
     |    number
     ;

number    :    DIGIT
               {    $$ = $1;    base  =  ($1==0)  ?  8  :  10;  }
     |    number  DIGIT
               {    $$  =  base * $1  +  $2;  }
     ;

%%      /*  start  of  programs  */

yylex() {      /*  lexical  analysis  routine  */
              /*  returns  LETTER  for  a  lower  case  letter,  yylval = 0  through  25  */
              /*  return  DIGIT  for  a  digit,  yylval = 0  through  9  */
              /*  all  other  characters  are  returned  immediately  */

     int  c;

     while(  (c=getchar())  ==  ' '  )  {/*  skip  blanks  */  }

     /*  c  is  now  nonblank  */

     if(  islower(  c  )  )  {
          yylval  =  c  -  'a';
          return  (  LETTER  );
          }
     if(  isdigit(  c  )  )  {
          yylval  =  c  -  '0';
          return(  DIGIT  );
          }
     return(  c  );
     }
]] run generate-sdf3-trimmed to "module test

imports
  test-lex

context-free start-symbols

  List

context-free priorities

  {left :
    Expr.Expr2} > {left :
    Expr.Expr4
    Expr.Expr5
    Expr.Expr6} > {left :
    Expr.Expr2
    Expr.Expr3} > {left :
    Expr.Expr7} > {left :
    Expr.Expr8}

context-free syntax

  List.List1 = \"\"
  List.List2 = List Stat \"\n\"
  Stat.Stat1 = Expr
  Stat.Stat2 = LETTER \"=\" Expr
  Expr.Expr1 = \"(\" Expr \")\"
  Expr.Expr2 = Expr \"+\" Expr
  Expr.Expr3 = Expr \"-\" Expr
  Expr.Expr4 = Expr \"*\" Expr
  Expr.Expr5 = Expr \"/\" Expr
  Expr.Expr6 = Expr \"%\" Expr
  Expr.Expr7 = Expr \"&\" Expr
  Expr.Expr8 = Expr \"|\" Expr
  Expr.Expr9 = \"-\" Expr
  Expr.Expr10 = LETTER
  Expr.Expr11 = Number
  Number.Number1 = DIGIT
  Number.Number2 = Number DIGIT
"



test interval [[
// Taken from http://dinosaur.compilertools.net/yacc/ Appendix C
%{

#  include  <stdio.h>
#  include  <ctype.h>

typedef  struct  interval  {
        double  lo,  hi;
        }  INTERVAL;

INTERVAL  vmul(),  vdiv();

double  atof();

double  dreg[ 26 ];
INTERVAL  vreg[ 26 ];

%}

%start    lines

%union    {
        int  ival;
        double  dval;
        INTERVAL  vval;
        }

%token  <ival>  DREG  VREG      /*  indices  into  dreg,  vreg  arrays  */

%token  <dval>  CONST           /*  floating  point  constant  */

%type  <dval>  dexp             /*  expression  */

%type  <vval>  vexp             /*  interval  expression  */

        /*  precedence  information  about  the  operators  */

%left   '+'  '-'
%left   '*'  '/'
%left   UMINUS        /*  precedence  for  unary  minus  */

%%

lines   :       /*  empty  */
        |       lines  line
        ;

line    :       dexp  '\n'
                        {       printf(  "%15.8f\n",  $1  );  }
        |       vexp  '\n'
                        {       printf(  "(%15.8f  ,  %15.8f  )\n",  $1.lo,  $1.hi  );  }
        |       DREG  '='  dexp  '\n'
                        {       dreg[$1]  =  $3;  }
        |       VREG  '='  vexp  '\n'
                        {       vreg[$1]  =  $3;  }
        |       error  "\n"
                        {       yyerrok;  }
        ;

dexp    :       CONST
        |       DREG
                        {       $$  =  dreg[$1];  }
        |       dexp  '+'  dexp
                        {       $$  =  $1  +  $3;  }
        |       dexp  '-'  dexp
                        {       $$  =  $1  -  $3;  }
        |       dexp  '*'  dexp
                        {       $$  =  $1  *  $3;  }
        |       dexp  '/'  dexp
                        {       $$  =  $1  /  $3;  }
        |       '-'  dexp       %prec  UMINUS
                        {       $$  =  - $2;  }
        |       '('  dexp  ')'
                        {       $$  =  $2;  }
        ;

vexp    :       dexp
                        {       $$.hi  =  $$.lo  =  $1;  }
        |       '('  dexp  ','  dexp  ')'
                        {
                        $$.lo  =  $2;
                        $$.hi  =  $4;
                        if(  $$.lo  >  $$.hi  ){
                                printf(  "interval  out  of  order\n"  );
                                YYERROR;
                                }
                        }
        |       VREG
                        {       $$  =  vreg[$1];    }
        |       vexp  '+'  vexp
                        {       $$.hi  =  $1.hi  +  $3.hi;
                                $$.lo  =  $1.lo  +  $3.lo;    }
        |       dexp  '+'  vexp
                        {       $$.hi  =  $1  +  $3.hi;
                                $$.lo  =  $1  +  $3.lo;    }
        |       vexp  '-'  vexp
                        {       $$.hi  =  $1.hi  -  $3.lo;
                                $$.lo  =  $1.lo  -  $3.hi;    }
        |       dexp  '-'  vexp
                        {       $$.hi  =  $1  -  $3.lo;
                                $$.lo  =  $1  -  $3.hi;    }
        |       vexp  '*'  vexp
                        {       $$  =  vmul(  $1.lo,  $1.hi,  $3  );  }
        |       dexp  '*'  vexp
                        {       $$  =  vmul(  $1,  $1,  $3  );  }
        |       vexp  '/'  vexp
                        {       if(  dcheck(  $3  )  )  YYERROR;
                                $$  =  vdiv(  $1.lo,  $1.hi,  $3  );  }
        |       dexp  '/'  vexp
                        {       if(  dcheck(  $3  )  )  YYERROR;
                                $$  =  vdiv(  $1,  $1,  $3  );  }
        |       '-'  vexp       %prec  UMINUS
                        {       $$.hi  =  -$2.lo;    $$.lo  =  -$2.hi;    }
        |       '('  vexp  ')'
                        {       $$  =  $2;  }
        ;

%%

#  define  BSZ  50        /*  buffer  size  for  floating  point  numbers  */

        /*  lexical  analysis  */

yylex(){
        register  c;

        while(  (c=getchar())  ==  ' '  ){  /*  skip  over  blanks  */  }

        if(  isupper(  c  )  ){
                yylval.ival  =  c  -  'A';
                return(  VREG  );
                }
        if(  islower(  c  )  ){
                yylval.ival  =  c  -  'a';
                return(  DREG  );
                }

        if(  isdigit(  c  )  ||  c=='.'  ){
                /*  gobble  up  digits,  points,  exponents  */

                char  buf[BSZ+1],  *cp  =  buf;
                int  dot  =  0,  exp  =  0;

                for(  ;  (cp-buf)<BSZ  ;  ++cp,c=getchar()  ){

                        *cp  =  c;
                        if(  isdigit(  c  )  )  continue;
                        if(  c  ==  '.'  ){
                                if(  dot++  ||  exp  )  return(  '.'  );    /*  will  cause  syntax  error  */
                                continue;
                                }

                        if(  c  ==  'e'  ){
                                if(  exp++  )  return(  'e'  );    /*  will  cause  syntax  error  */
                                continue;
                                }

                        /*  end  of  number  */
                        break;
                        }
                *cp  =  '\0';

                if(  (cp-buf)  >=  BSZ  )  printf(  "constant  too  long:  truncated\n"  );
                else  ungetc(  c,  stdin  );    /*  push  back  last  char  read  */
                yylval.dval  =  atof(  buf  );
                return(  CONST  );
                }
        return(  c  );
        }

INTERVAL  hilo(  a,  b,  c,  d  )  double  a,  b,  c,  d;  {
        /*  returns  the  smallest  interval  containing  a,  b,  c,  and  d  */
        /*  used  by  *,  /  routines  */
        INTERVAL  v;

        if(  a>b  )  {  v.hi  =  a;    v.lo  =  b;  }
        else  {  v.hi  =  b;    v.lo  =  a;  }

        if(  c>d  )  {
                if(  c>v.hi  )  v.hi  =  c;
                if(  d<v.lo  )  v.lo  =  d;
                }
        else  {
                if(  d>v.hi  )  v.hi  =  d;
                if(  c<v.lo  )  v.lo  =  c;
                }
        return(  v  );
        }

INTERVAL  vmul(  a,  b,  v  )  double  a,  b;    INTERVAL  v;  {
        return(  hilo(  a*v.hi,  a*v.lo,  b*v.hi,  b*v.lo  )  );
        }

dcheck(  v  )  INTERVAL  v;  {
        if(  v.hi  >=  0.  &&  v.lo  <=  0.  ){
                printf(  "divisor  interval  contains  0.\n"  );
                return(  1  );
                }
        return(  0  );
        }

INTERVAL  vdiv(  a,  b,  v  )  double  a,  b;    INTERVAL  v;  {
        return(  hilo(  a/v.hi,  a/v.lo,  b/v.hi,  b/v.lo  )  );
        }
]] run generate-sdf3-trimmed to "module test

imports
  test-lex

context-free start-symbols

  Lines

context-free priorities

  {left :
    Expr.Expr2} > {left :
    Dexp.Dexp5
    Vexp.Vexp8
    Vexp.Vexp9
    Dexp.Dexp6
    Vexp.Vexp10
    Vexp.Vexp11} > {left :
    Dexp.Dexp3
    Vexp.Vexp4
    Vexp.Vexp5
    Dexp.Dexp4
    Vexp.Vexp6
    Vexp.Vexp7}

context-free syntax

  Lines.Lines1 = \"\"
  Lines.Lines2 = Lines Line
  Line.Line1 = Dexp \"\n\"
  Line.Line2 = Vexp \"\n\"
  Line.Line3 = DREG \"=\" Dexp \"\n\"
  Line.Line4 = VREG \"=\" Vexp \"\n\"
  Dexp.Dexp1 = CONST
  Dexp.Dexp2 = DREG
  Dexp.Dexp3 = Dexp \"+\" Dexp
  Dexp.Dexp4 = Dexp \"-\" Dexp
  Dexp.Dexp5 = Dexp \"*\" Dexp
  Dexp.Dexp6 = Dexp \"/\" Dexp
  Dexp.Dexp7 = \"-\" Dexp
  Dexp.Dexp8 = \"(\" Dexp \")\"
  Vexp.Vexp1 = Dexp
  Vexp.Vexp2 = \"(\" Dexp \",\" Dexp \")\"
  Vexp.Vexp3 = VREG
  Vexp.Vexp4 = Vexp \"+\" Vexp
  Vexp.Vexp5 = Dexp \"+\" Vexp
  Vexp.Vexp6 = Vexp \"-\" Vexp
  Vexp.Vexp7 = Dexp \"-\" Vexp
  Vexp.Vexp8 = Vexp \"*\" Vexp
  Vexp.Vexp9 = Dexp \"*\" Vexp
  Vexp.Vexp10 = Vexp \"/\" Vexp
  Vexp.Vexp11 = Dexp \"/\" Vexp
  Vexp.Vexp12 = \"-\" Vexp
  Vexp.Vexp13 = \"(\" Vexp \")\"
"