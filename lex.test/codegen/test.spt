module testCodegen

language lex

test empty [[ ]] run generate-sdf3-trimmed to "module test-lex lexical syntax"


test character class short [[
  [A] {return char;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax Char = [A]"

test character class range [[
  [A-Z] {return char;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax Char = [A-Z]"

test character class hyphen-left [[
  [-A-Z\t] {return char;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax Char = [\-A-Z\t]"

test character class hyphen-right [[
  [A-Z\t-] {return char;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax Char = [A-Z\t\-]"

test character classes: two [[
  [A-Z][0-9] {return chars;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax Chars = [A-Z] [0-9]"

test character classes: three [[
  [A-Z][0-9][A-Z] {return chars;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax Chars = [A-Z] [0-9] [A-Z]"

// TODO why does the is-alphanum strategy always succeed?
//test character class odd characters [[
//  [`~!@#$%^&*()_+=] {return char;}
//]] run generate-sdf3-trimmed to
//  "module test-lex lexical syntax Char = [\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\=]"

test anything [[
  . {return anything;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax Anything = ~[]"

test extra statement [[
  . {if (ECHO) printf("echo"); return anything;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax Anything = ~[]"


// TODO those quotation marks don't seem to work in strings...
//test string literal [[
//"__"    {return doubleScore;}
//]] run generate-sdf3-trimmed to "module test-lex lexical syntax DoubleScore = \"__\""


test I've got three rules I count them [[
  [1] {return one;}
  [2] {return two;}
  [3] {return three;}
]] run generate-sdf3-trimmed to
  "module test-lex lexical syntax One = [1] Two = [2] Three = [3]"
