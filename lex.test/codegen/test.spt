module testCodegen

language lex


test empty [[ %% ]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax"


test character class short [[
  %%
  [A] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [A]"

test character class range [[
  %%
  [A-Z] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [A-Z]"

test character class hyphen-left [[
  %%
  [-A-Z\t] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [\-A-Z\t]"

test character class hyphen-right [[
  %%
  [A-Z\t-] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [A-Z\t\-]"

test character class bracket [[
  %%
  []A-Z] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [\]A-Z]"

test character class space [[
  %%
  [ ] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [\ ]"

test character class spaced [[
  %%
  [ A ] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [\ A\ ]"

test character class opt [[
  %%
  [A]? {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [A]?"

test character class plus [[
  %%
  [A]+ {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [A]+"

test character class star [[
  %%
  [A]* {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [A]*"

test character class opt plus star [[
  %%
  [A-Z]?[a-z]+[0-9]* {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [A-Z]? [a-z]+ [0-9]*"


test not character class short [[
  %%
  [^A] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[A]"

test not character class range [[
  %%
  [^A-Z] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[A-Z]"

test not character class hyphen-left [[
  %%
  [^-A-Z\t] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[\-A-Z\t]"

test not character class hyphen-right [[
  %%
  [^A-Z\t-] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[A-Z\t\-]"

test not character class bracket [[
  %%
  [^]A-Z] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[\]A-Z]"

test not character class space [[
  %%
  [^ ] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[\ ]"

test not character class spaced [[
  %%
  [^ A ] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[\ A\ ]"

test not character class opt [[
  %%
  [^A]? {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[A]?"

test not character class plus [[
  %%
  [^A]+ {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[A]+"

test not character class star [[
  %%
  [^A]* {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[A]*"

test not character class opt plus star [[
  %%
  [^A-Z]?[^a-z]+[^0-9]* {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ~[A-Z]? ~[a-z]+ ~[0-9]*"


test character classes: two [[
  %%
  [A-Z][0-9] {return chars;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax Chars = [A-Z] [0-9]"

test character classes: three [[
  %%
  [A-Z][0-9][A-Z] {return chars;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax Chars = [A-Z] [0-9] [A-Z]"

test character class odd characters [[
  %%
  [`~!@#$%^&*()_+=\\] {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [\`\~\!\@\#\$\%\^\&\*\(\)\_\+\=\\]"


test anything [[
  %%
  . {return anything;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax Anything = ~[\n]"

test literal [[
  %%
  a {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [a]"

test literals [[
  %%
  abc {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [a] [b] [c]"

test literals count [[
  %%
  a{2,4}bc {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ([a] [a] [a]? [a]?) [b] [c]"

test escaped [[
  %%
  \. {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [\.]"

test should be escaped [[
  %%
  ' {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [\']"

test newline [[
  %%
  \n {return c;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [\n]"

test extra statement [[
  %%
  . {if (ECHO) printf("echo"); return anything;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax Anything = ~[\n]"


test string literal [[
  %%
  "__"    {return doubleScore;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax DoubleScore = \"__\""


test or [[
  %%
  [a] | [b] { return c; }
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [a] | [b]"

test or 3 [[
  %%
  a | b | c { return c; }
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = [a] | [b] | [c]"

test or grouping [[
  %%
  (a | b) | ce | df { return c; }
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ([a] | [b]) | ([c] [e]) | ([d] [f])"

test parse or grouping 2 [[
  %%
  ([a] | [b]) | (([c][e]) | ([d][f])) { return c; }
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax C = ([a] | [b]) | ([c] [e]) | ([d] [f])"


test I've got three rules I count them [[
  %%
  [1] {return one;}
  [2] {return two;}
  [3] {return three;}
]] run generate-sdf3-test to "module test-lex

lexical syntax

  One = [1]
  Two = [2]
  Three = [3]
"


test return space [[
  %%
  [a] {returna;}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax LAYOUT = [a]"

test layout rule [[
  %%
  [ \t\n] {}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax LAYOUT = [\ \t\n]"


/*
test error rule [[
  %%
  . {ECHO; yyerror("Unexpected character");}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax"
*/

test named regex [[
  L [ \t]
  %%
  {L} {}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax L = [\ \t] LAYOUT = L"

test named undefined [[
  %%
  {L} {}
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax LAYOUT = L"



test useless definitions [[
  %s a b
  %T
  1 a
  %T
  %a 123
  %e 123
  %k 123
  %n 123
  %o 123
  %p 123
  %{
      int a;
  %}
  %%
]] run generate-sdf3-test-oneline to
  "module test-lex lexical syntax"
