module testBigFiles

language lex


test interval-lex [[
%%
[0-9]+ {return CONST;}
[a-z] {return DREG;}
[A-Z] {return VREG;}
[ \t] {}
]] run generate-sdf3-test to "module test-lex

lexical syntax

  CONST = [0-9]+
  DREG = [a-z]
  VREG = [A-Z]
  LAYOUT = [\ \t]
"


test float [[
// Adapted from http://dinosaur.compilertools.net/lex/index.html Section 6
D                   [0-9]
%{%}
E                   [DEde][-+]?{D}+
%%
{D}+                { return integer; }
{D}+"."{D}*({E})?   |
{D}*"."{D}+({E})?   |
{D}+{E}             { return real; }
]] run generate-sdf3-test to "module test-lex

lexical syntax

  D = [0-9]
  E = [DEde] [\-\+]? D+
  Integer = D+
  Real = (D+ \".\" D* E?) | (D* \".\" D+ E?) | (D+ E)
"


test table example [[
// Taken from http://www.cs.man.ac.uk/~pjj/cs212/ex5_hint.html
%%
[A-Z]+                          {if(trace)ECHO; return school;}
[A-Z][0-9]                      {if(trace)ECHO; return group;}
"__"                            {if(trace)ECHO; return group;}
[A-Z][A-Z][0-9][0-9][0-9][0-9]  {if(trace)ECHO; return module;}
[A-Z][A-Z][0-9][0-9][0-9]       {if(trace)ECHO; return module;}
[A-Z][a-z'][-A-Za-z, ]*         {if(trace)ECHO; return name;}
[ \t\n]                         {if(trace)ECHO;}
.                               {ECHO; yyerror("unexpected character");}
]] run generate-sdf3-test to "module test-lex

lexical syntax

  School = [A-Z]+
  Group = [A-Z] [0-9]
  Group = \"__\"
  Module = [A-Z] [A-Z] [0-9] [0-9] [0-9] [0-9]
  Module = [A-Z] [A-Z] [0-9] [0-9] [0-9]
  Name = [A-Z] [a-z\'] [\-A-Za-z\,\ ]*
  LAYOUT = [\ \t\n]
  LAYOUT = ~[\n]
"

test c [[
D           [0-9]
%{%}
L           [a-zA-Z_]
%{%}
H           [a-fA-F0-9]
%{%}
E           [Ee][+-]?{D}+
%{%}
FS          (f|F|l|L)
%{%}
IS          (u|U|l|L)*

%{
//#include <stdio.h>
//#include "y.tab.h"

void count();
%}

%%
"/*"            { comment(); }

"auto"          { count(); return(AUTO); }
"break"         { count(); return(BREAK); }
"case"          { count(); return(CASE); }
"char"          { count(); return(CHAR); }
"const"         { count(); return(CONST); }
"continue"      { count(); return(CONTINUE); }
"default"       { count(); return(DEFAULT); }
"do"            { count(); return(DO); }
"double"        { count(); return(DOUBLE); }
"else"          { count(); return(ELSE); }
"enum"          { count(); return(ENUM); }
"extern"        { count(); return(EXTERN); }
"float"         { count(); return(FLOAT); }
"for"           { count(); return(FOR); }
"goto"          { count(); return(GOTO); }
"if"            { count(); return(IF); }
"int"           { count(); return(INT); }
"long"          { count(); return(LONG); }
"register"      { count(); return(REGISTER); }
"return"        { count(); return(RETURN); }
"short"         { count(); return(SHORT); }
"signed"        { count(); return(SIGNED); }
"sizeof"        { count(); return(SIZEOF); }
"static"        { count(); return(STATIC); }
"struct"        { count(); return(STRUCT); }
"switch"        { count(); return(SWITCH); }
"typedef"       { count(); return(TYPEDEF); }
"union"         { count(); return(UNION); }
"unsigned"      { count(); return(UNSIGNED); }
"void"          { count(); return(VOID); }
"volatile"      { count(); return(VOLATILE); }
"while"         { count(); return(WHILE); }

{L}({L}|{D})*       { count(); return(IDENTIFIER); return(check_type()); }

0[xX]{H}+{IS}?      { count(); return(CONSTANT); }
0{D}+{IS}?      { count(); return(CONSTANT); }
{D}+{IS}?       { count(); return(CONSTANT); }
L?'(\\.|[^\\'])+'   { count(); return(CONSTANT); }

{D}+{E}{FS}?        { count(); return(CONSTANT); }
{D}*"."{D}+({E})?{FS}?  { count(); return(CONSTANT); }
{D}+"."{D}*({E})?{FS}?  { count(); return(CONSTANT); }

L?\"(\\.|[^\\"])*\" { count(); return(STRING_LITERAL); }

"..."           { count(); return(ELLIPSIS); }
">>="           { count(); return(RIGHT_ASSIGN); }
"<<="           { count(); return(LEFT_ASSIGN); }
"+="            { count(); return(ADD_ASSIGN); }
"-="            { count(); return(SUB_ASSIGN); }
"*="            { count(); return(MUL_ASSIGN); }
"/="            { count(); return(DIV_ASSIGN); }
"%="            { count(); return(MOD_ASSIGN); }
"&="            { count(); return(AND_ASSIGN); }
"^="            { count(); return(XOR_ASSIGN); }
"|="            { count(); return(OR_ASSIGN); }
">>"            { count(); return(RIGHT_OP); }
"<<"            { count(); return(LEFT_OP); }
"++"            { count(); return(INC_OP); }
"--"            { count(); return(DEC_OP); }
"->"            { count(); return(PTR_OP); }
"&&"            { count(); return(AND_OP); }
"||"            { count(); return(OR_OP); }
"<="            { count(); return(LE_OP); }
">="            { count(); return(GE_OP); }
"=="            { count(); return(EQ_OP); }
"!="            { count(); return(NE_OP); }
";"         { count(); return(';'); }
("{"|"<%")      { count(); return('{'); }
("}"|"%>")      { count(); return('}'); }
","         { count(); return(','); }
":"         { count(); return(':'); }
"="         { count(); return('='); }
"("         { count(); return('('); }
")"         { count(); return(')'); }
("["|"<:")      { count(); return('['); }
("]"|":>")      { count(); return(']'); }
"."         { count(); return('.'); }
"&"         { count(); return('&'); }
"!"         { count(); return('!'); }
"~"         { count(); return('~'); }
"-"         { count(); return('-'); }
"+"         { count(); return('+'); }
"*"         { count(); return('*'); }
"/"         { count(); return('/'); }
"%"         { count(); return('%'); }
"<"         { count(); return('<'); }
">"         { count(); return('>'); }
"^"         { count(); return('^'); }
"|"         { count(); return('|'); }
"?"         { count(); return('?'); }

[ \t\v\n\f]     { count(); }
.           { /* ignore bad characters */ }

%%

yywrap()
{
    return(1);
}


comment()
{
    char c, c1;

loop:
    while ((c = input()) != '*' && c != 0)
        putchar(c);

    if ((c1 = input()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }

    if (c != 0)
        putchar(c1);
}


int column = 0;

void count()
{
    int i;

    for (i = 0; yytext[i] != '\0'; i++)
        if (yytext[i] == '\n')
            column = 0;
        else if (yytext[i] == '\t')
            column += 8 - (column % 8);
        else
            column++;

    ECHO;
}


int check_type()
{
/*
* pseudo code --- this is what it should check
*
*   if (yytext == type_name)
*       return(TYPE_NAME);
*
*   return(IDENTIFIER);
*/

/*
*   it actually will only return IDENTIFIER
*/

    return(IDENTIFIER);
}
]] run generate-sdf3-test to "module test-lex

lexical syntax

  D = [0-9]
  L = [a-zA-Z\_]
  H = [a-fA-F0-9]
  E = [Ee] [\+\-]? D+
  FS = [f] | [F] | [l] | [L]
  IS = ([u] | [U] | [l] | [L])*
  LAYOUT = \"/*\"
  AUTO = \"auto\"
  BREAK = \"break\"
  CASE = \"case\"
  CHAR = \"char\"
  CONST = \"const\"
  CONTINUE = \"continue\"
  DEFAULT = \"default\"
  DO = \"do\"
  DOUBLE = \"double\"
  ELSE = \"else\"
  ENUM = \"enum\"
  EXTERN = \"extern\"
  FLOAT = \"float\"
  FOR = \"for\"
  GOTO = \"goto\"
  IF = \"if\"
  INT = \"int\"
  LONG = \"long\"
  REGISTER = \"register\"
  RETURN = \"return\"
  SHORT = \"short\"
  SIGNED = \"signed\"
  SIZEOF = \"sizeof\"
  STATIC = \"static\"
  STRUCT = \"struct\"
  SWITCH = \"switch\"
  TYPEDEF = \"typedef\"
  UNION = \"union\"
  UNSIGNED = \"unsigned\"
  VOID = \"void\"
  VOLATILE = \"volatile\"
  WHILE = \"while\"
  IDENTIFIER = L (L | D)*
  CONSTANT = [0] [xX] H+ IS?
  CONSTANT = [0] D+ IS?
  CONSTANT = D+ IS?
  CONSTANT = [L]? [\'] (([\\] ~[\n]) | ~[\\\'])+ [\']
  CONSTANT = D+ E FS?
  CONSTANT = D* \".\" D+ E? FS?
  CONSTANT = D+ \".\" D* E? FS?
  STRING-LITERAL = [L]? [\\"] (([\\] ~[\n]) | ~[\\\\"])* [\\"]
  ELLIPSIS = \"...\"
  RIGHT-ASSIGN = \">>=\"
  LEFT-ASSIGN = \"<<=\"
  ADD-ASSIGN = \"+=\"
  SUB-ASSIGN = \"-=\"
  MUL-ASSIGN = \"*=\"
  DIV-ASSIGN = \"/=\"
  MOD-ASSIGN = \"%=\"
  AND-ASSIGN = \"&=\"
  XOR-ASSIGN = \"^=\"
  OR-ASSIGN = \"|=\"
  RIGHT-OP = \">>\"
  LEFT-OP = \"<<\"
  INC-OP = \"++\"
  DEC-OP = \"--\"
  PTR-OP = \"->\"
  AND-OP = \"&&\"
  OR-OP = \"||\"
  LE-OP = \"<=\"
  GE-OP = \">=\"
  EQ-OP = \"==\"
  NE-OP = \"!=\"
  LAYOUT = \";\"
  LAYOUT = \"{\" | \"<%\"
  LAYOUT = \"}\" | \"%>\"
  LAYOUT = \",\"
  LAYOUT = \":\"
  LAYOUT = \"=\"
  LAYOUT = \"(\"
  LAYOUT = \")\"
  LAYOUT = \"[\" | \"<:\"
  LAYOUT = \"]\" | \":>\"
  LAYOUT = \".\"
  LAYOUT = \"&\"
  LAYOUT = \"!\"
  LAYOUT = \"~\"
  LAYOUT = \"-\"
  LAYOUT = \"+\"
  LAYOUT = \"*\"
  LAYOUT = \"/\"
  LAYOUT = \"%\"
  LAYOUT = \"<\"
  LAYOUT = \">\"
  LAYOUT = \"^\"
  LAYOUT = \"|\"
  LAYOUT = \"?\"
  LAYOUT = [\ \t\v\n\f]
  LAYOUT = ~[\n]
"
