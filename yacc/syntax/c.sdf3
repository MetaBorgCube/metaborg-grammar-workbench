// Source: https://www.lysator.liu.se/c/ANSI-C-grammar-y.html
module c

imports
  c-lex

context-free syntax

  Primary-expression.Primary-expression1 = IDENTIFIER
  Primary-expression.Primary-expression2 = CONSTANT
  Primary-expression.Primary-expression3 = STRING-LITERAL
  Primary-expression.Primary-expression4 = "(" Expression ")"
  Postfix-expression.Postfix-expression1 = Primary-expression
  Postfix-expression.Postfix-expression2 = Postfix-expression "[" Expression "]"
  Postfix-expression.Postfix-expression3 = Postfix-expression "(" ")"
  Postfix-expression.Postfix-expression4 = Postfix-expression "(" Argument-expression-list ")"
  Postfix-expression.Postfix-expression5 = Postfix-expression "." IDENTIFIER
  Postfix-expression.Postfix-expression6 = Postfix-expression PTR-OP IDENTIFIER
  Postfix-expression.Postfix-expression7 = Postfix-expression INC-OP
  Postfix-expression.Postfix-expression8 = Postfix-expression DEC-OP
  Argument-expression-list.Argument-expression-list1 = Assignment-expression
  Argument-expression-list.Argument-expression-list2 = Argument-expression-list "," Assignment-expression
  Unary-expression.Unary-expression1 = Postfix-expression
  Unary-expression.Unary-expression2 = INC-OP Unary-expression
  Unary-expression.Unary-expression3 = DEC-OP Unary-expression
  Unary-expression.Unary-expression4 = Unary-operator Cast-expression
  Unary-expression.Unary-expression5 = SIZEOF Unary-expression
  Unary-expression.Unary-expression6 = SIZEOF "(" Type-name ")"
  Unary-operator.Unary-operator1 = "&"
  Unary-operator.Unary-operator2 = "*"
  Unary-operator.Unary-operator3 = "+"
  Unary-operator.Unary-operator4 = "-"
  Unary-operator.Unary-operator5 = "~"
  Unary-operator.Unary-operator6 = "!"
  Cast-expression.Cast-expression1 = Unary-expression
  Cast-expression.Cast-expression2 = "(" Type-name ")" Cast-expression
  Multiplicative-expression.Multiplicative-expression1 = Cast-expression
  Multiplicative-expression.Multiplicative-expression2 = Multiplicative-expression "*" Cast-expression
  Multiplicative-expression.Multiplicative-expression3 = Multiplicative-expression "/" Cast-expression
  Multiplicative-expression.Multiplicative-expression4 = Multiplicative-expression "%" Cast-expression
  Additive-expression.Additive-expression1 = Multiplicative-expression
  Additive-expression.Additive-expression2 = Additive-expression "+" Multiplicative-expression
  Additive-expression.Additive-expression3 = Additive-expression "-" Multiplicative-expression
  Shift-expression.Shift-expression1 = Additive-expression
  Shift-expression.Shift-expression2 = Shift-expression LEFT-OP Additive-expression
  Shift-expression.Shift-expression3 = Shift-expression RIGHT-OP Additive-expression
  Relational-expression.Relational-expression1 = Shift-expression
  Relational-expression.Relational-expression2 = Relational-expression "<" Shift-expression
  Relational-expression.Relational-expression3 = Relational-expression ">" Shift-expression
  Relational-expression.Relational-expression4 = Relational-expression LE-OP Shift-expression
  Relational-expression.Relational-expression5 = Relational-expression GE-OP Shift-expression
  Equality-expression.Equality-expression1 = Relational-expression
  Equality-expression.Equality-expression2 = Equality-expression EQ-OP Relational-expression
  Equality-expression.Equality-expression3 = Equality-expression NE-OP Relational-expression
  And-expression.And-expression1 = Equality-expression
  And-expression.And-expression2 = And-expression "&" Equality-expression
  Exclusive-or-expression.Exclusive-or-expression1 = And-expression
  Exclusive-or-expression.Exclusive-or-expression2 = Exclusive-or-expression "^" And-expression
  Inclusive-or-expression.Inclusive-or-expression1 = Exclusive-or-expression
  Inclusive-or-expression.Inclusive-or-expression2 = Inclusive-or-expression "|" Exclusive-or-expression
  Logical-and-expression.Logical-and-expression1 = Inclusive-or-expression
  Logical-and-expression.Logical-and-expression2 = Logical-and-expression AND-OP Inclusive-or-expression
  Logical-or-expression.Logical-or-expression1 = Logical-and-expression
  Logical-or-expression.Logical-or-expression2 = Logical-or-expression OR-OP Logical-and-expression
  Conditional-expression.Conditional-expression1 = Logical-or-expression
  Conditional-expression.Conditional-expression2 = Logical-or-expression "?" Expression ":" Conditional-expression
  Assignment-expression.Assignment-expression1 = Conditional-expression
  Assignment-expression.Assignment-expression2 = Unary-expression Assignment-operator Assignment-expression
  Assignment-operator.Assignment-operator1 = "="
  Assignment-operator.Assignment-operator2 = MUL-ASSIGN
  Assignment-operator.Assignment-operator3 = DIV-ASSIGN
  Assignment-operator.Assignment-operator4 = MOD-ASSIGN
  Assignment-operator.Assignment-operator5 = ADD-ASSIGN
  Assignment-operator.Assignment-operator6 = SUB-ASSIGN
  Assignment-operator.Assignment-operator7 = LEFT-ASSIGN
  Assignment-operator.Assignment-operator8 = RIGHT-ASSIGN
  Assignment-operator.Assignment-operator9 = AND-ASSIGN
  Assignment-operator.Assignment-operator10 = XOR-ASSIGN
  Assignment-operator.Assignment-operator11 = OR-ASSIGN
  Expression.Expression1 = Assignment-expression
  Expression.Expression2 = Expression "," Assignment-expression
  Constant-expression.Constant-expression = Conditional-expression
  Declaration.Declaration1 = Declaration-specifiers ";"
  Declaration.Declaration2 = Declaration-specifiers Init-declarator-list ";"
  Declaration-specifiers.Declaration-specifiers1 = Storage-class-specifier
  Declaration-specifiers.Declaration-specifiers2 = Storage-class-specifier Declaration-specifiers
  Declaration-specifiers.Declaration-specifiers3 = Type-specifier
  Declaration-specifiers.Declaration-specifiers4 = Type-specifier Declaration-specifiers
  Declaration-specifiers.Declaration-specifiers5 = Type-qualifier
  Declaration-specifiers.Declaration-specifiers6 = Type-qualifier Declaration-specifiers
  Init-declarator-list.Init-declarator-list1 = Init-declarator
  Init-declarator-list.Init-declarator-list2 = Init-declarator-list "," Init-declarator
  Init-declarator.Init-declarator1 = Declarator
  Init-declarator.Init-declarator2 = Declarator "=" Initializer
  Storage-class-specifier.Storage-class-specifier1 = TYPEDEF
  Storage-class-specifier.Storage-class-specifier2 = EXTERN
  Storage-class-specifier.Storage-class-specifier3 = STATIC
  Storage-class-specifier.Storage-class-specifier4 = AUTO
  Storage-class-specifier.Storage-class-specifier5 = REGISTER
  Type-specifier.Type-specifier1 = VOID
  Type-specifier.Type-specifier2 = CHAR
  Type-specifier.Type-specifier3 = SHORT
  Type-specifier.Type-specifier4 = INT
  Type-specifier.Type-specifier5 = LONG
  Type-specifier.Type-specifier6 = FLOAT
  Type-specifier.Type-specifier7 = DOUBLE
  Type-specifier.Type-specifier8 = SIGNED
  Type-specifier.Type-specifier9 = UNSIGNED
  Type-specifier.Type-specifier10 = Struct-or-union-specifier
  Type-specifier.Type-specifier11 = Enum-specifier
  Type-specifier.Type-specifier12 = TYPE-NAME
  Struct-or-union-specifier.Struct-or-union-specifier1 = Struct-or-union IDENTIFIER "{" Struct-declaration-list "}"
  Struct-or-union-specifier.Struct-or-union-specifier2 = Struct-or-union "{" Struct-declaration-list "}"
  Struct-or-union-specifier.Struct-or-union-specifier3 = Struct-or-union IDENTIFIER
  Struct-or-union.Struct-or-union1 = STRUCT
  Struct-or-union.Struct-or-union2 = UNION
  Struct-declaration-list.Struct-declaration-list1 = Struct-declaration
  Struct-declaration-list.Struct-declaration-list2 = Struct-declaration-list Struct-declaration
  Struct-declaration.Struct-declaration = Specifier-qualifier-list Struct-declarator-list ";"
  Specifier-qualifier-list.Specifier-qualifier-list1 = Type-specifier Specifier-qualifier-list
  Specifier-qualifier-list.Specifier-qualifier-list2 = Type-specifier
  Specifier-qualifier-list.Specifier-qualifier-list3 = Type-qualifier Specifier-qualifier-list
  Specifier-qualifier-list.Specifier-qualifier-list4 = Type-qualifier
  Struct-declarator-list.Struct-declarator-list1 = Struct-declarator
  Struct-declarator-list.Struct-declarator-list2 = Struct-declarator-list "," Struct-declarator
  Struct-declarator.Struct-declarator1 = Declarator
  Struct-declarator.Struct-declarator2 = ":" Constant-expression
  Struct-declarator.Struct-declarator3 = Declarator ":" Constant-expression
  Enum-specifier.Enum-specifier1 = ENUM "{" Enumerator-list "}"
  Enum-specifier.Enum-specifier2 = ENUM IDENTIFIER "{" Enumerator-list "}"
  Enum-specifier.Enum-specifier3 = ENUM IDENTIFIER
  Enumerator-list.Enumerator-list1 = Enumerator
  Enumerator-list.Enumerator-list2 = Enumerator-list "," Enumerator
  Enumerator.Enumerator1 = IDENTIFIER
  Enumerator.Enumerator2 = IDENTIFIER "=" Constant-expression
  Type-qualifier.Type-qualifier1 = CONST
  Type-qualifier.Type-qualifier2 = VOLATILE
  Declarator.Declarator1 = Pointer Direct-declarator
  Declarator.Declarator2 = Direct-declarator
  Direct-declarator.Direct-declarator1 = IDENTIFIER
  Direct-declarator.Direct-declarator2 = "(" Declarator ")"
  Direct-declarator.Direct-declarator3 = Direct-declarator "[" Constant-expression "]"
  Direct-declarator.Direct-declarator4 = Direct-declarator "[" "]"
  Direct-declarator.Direct-declarator5 = Direct-declarator "(" Parameter-type-list ")"
  Direct-declarator.Direct-declarator6 = Direct-declarator "(" Identifier-list ")"
  Direct-declarator.Direct-declarator7 = Direct-declarator "(" ")"
  Pointer.Pointer1 = "*"
  Pointer.Pointer2 = "*" Type-qualifier-list
  Pointer.Pointer3 = "*" Pointer
  Pointer.Pointer4 = "*" Type-qualifier-list Pointer
  Type-qualifier-list.Type-qualifier-list1 = Type-qualifier
  Type-qualifier-list.Type-qualifier-list2 = Type-qualifier-list Type-qualifier
  Parameter-type-list.Parameter-type-list1 = Parameter-list
  Parameter-type-list.Parameter-type-list2 = Parameter-list "," ELLIPSIS
  Parameter-list.Parameter-list1 = Parameter-declaration
  Parameter-list.Parameter-list2 = Parameter-list "," Parameter-declaration
  Parameter-declaration.Parameter-declaration1 = Declaration-specifiers Declarator
  Parameter-declaration.Parameter-declaration2 = Declaration-specifiers Abstract-declarator
  Parameter-declaration.Parameter-declaration3 = Declaration-specifiers
  Identifier-list.Identifier-list1 = IDENTIFIER
  Identifier-list.Identifier-list2 = Identifier-list "," IDENTIFIER
  Type-name.Type-name1 = Specifier-qualifier-list
  Type-name.Type-name2 = Specifier-qualifier-list Abstract-declarator
  Abstract-declarator.Abstract-declarator1 = Pointer
  Abstract-declarator.Abstract-declarator2 = Direct-abstract-declarator
  Abstract-declarator.Abstract-declarator3 = Pointer Direct-abstract-declarator
  Direct-abstract-declarator.Direct-abstract-declarator1 = "(" Abstract-declarator ")"
  Direct-abstract-declarator.Direct-abstract-declarator2 = "[" "]"
  Direct-abstract-declarator.Direct-abstract-declarator3 = "[" Constant-expression "]"
  Direct-abstract-declarator.Direct-abstract-declarator4 = Direct-abstract-declarator "[" "]"
  Direct-abstract-declarator.Direct-abstract-declarator5 = Direct-abstract-declarator "[" Constant-expression "]"
  Direct-abstract-declarator.Direct-abstract-declarator6 = "(" ")"
  Direct-abstract-declarator.Direct-abstract-declarator7 = "(" Parameter-type-list ")"
  Direct-abstract-declarator.Direct-abstract-declarator8 = Direct-abstract-declarator "(" ")"
  Direct-abstract-declarator.Direct-abstract-declarator9 = Direct-abstract-declarator "(" Parameter-type-list ")"
  Initializer.Initializer1 = Assignment-expression
  Initializer.Initializer2 = "{" Initializer-list "}"
  Initializer.Initializer3 = "{" Initializer-list "," "}"
  Initializer-list.Initializer-list1 = Initializer
  Initializer-list.Initializer-list2 = Initializer-list "," Initializer
  Statement.Statement1 = Labeled-statement
  Statement.Statement2 = Compound-statement
  Statement.Statement3 = Expression-statement
  Statement.Statement4 = Selection-statement
  Statement.Statement5 = Iteration-statement
  Statement.Statement6 = Jump-statement
  Labeled-statement.Labeled-statement1 = IDENTIFIER ":" Statement
  Labeled-statement.Labeled-statement2 = CASE Constant-expression ":" Statement
  Labeled-statement.Labeled-statement3 = DEFAULT ":" Statement
  Compound-statement.Compound-statement1 = "{" "}"
  Compound-statement.Compound-statement2 = "{" Statement-list "}"
  Compound-statement.Compound-statement3 = "{" Declaration-list "}"
  Compound-statement.Compound-statement4 = "{" Declaration-list Statement-list "}"
  Declaration-list.Declaration-list1 = Declaration
  Declaration-list.Declaration-list2 = Declaration-list Declaration
  Statement-list.Statement-list1 = Statement
  Statement-list.Statement-list2 = Statement-list Statement
  Expression-statement.Expression-statement1 = ";"
  Expression-statement.Expression-statement2 = Expression ";"
  Selection-statement.Selection-statement1 = IF "(" Expression ")" Statement
  Selection-statement.Selection-statement2 = IF "(" Expression ")" Statement ELSE Statement
  Selection-statement.Selection-statement3 = SWITCH "(" Expression ")" Statement
  Iteration-statement.Iteration-statement1 = WHILE "(" Expression ")" Statement
  Iteration-statement.Iteration-statement2 = DO Statement WHILE "(" Expression ")" ";"
  Iteration-statement.Iteration-statement3 = FOR "(" Expression-statement Expression-statement ")" Statement
  Iteration-statement.Iteration-statement4 = FOR "(" Expression-statement Expression-statement Expression ")" Statement
  Jump-statement.Jump-statement1 = GOTO IDENTIFIER ";"
  Jump-statement.Jump-statement2 = CONTINUE ";"
  Jump-statement.Jump-statement3 = BREAK ";"
  Jump-statement.Jump-statement4 = RETURN ";"
  Jump-statement.Jump-statement5 = RETURN Expression ";"
  Translation-unit.Translation-unit1 = External-declaration
  Translation-unit.Translation-unit2 = Translation-unit External-declaration
  External-declaration.External-declaration1 = Function-definition
  External-declaration.External-declaration2 = Declaration
  Function-definition.Function-definition1 = Declaration-specifiers Declarator Declaration-list Compound-statement
  Function-definition.Function-definition2 = Declaration-specifiers Declarator Compound-statement
  Function-definition.Function-definition3 = Declarator Declaration-list Compound-statement
  Function-definition.Function-definition4 = Declarator Compound-statement
