module codegen/build

imports

  libspoofax/resource/path
  codegen/-
  trans/pp

rules

  /**
   * Rename an SDF3 module corresponding to the filename.
   * Also renames the importing of the corresponding *-lex file.
   *
   * @param newname the filename of this module, with or without extension.
   */
  rename-sdf3-module(|newname):
    Module(Unparameterized(name), [Imports([Module(Unparameterized("test-lex"))])], b) ->
      Module(Unparameterized(<remove-extension> newname),
             [Imports([Module(Unparameterized(<conc-strings> (<remove-extension> newname, "-lex")))])], b)

  /**
   * Transform YACC AST to SDF3 AST and show the resulting ATerm.
   *
   * @type YACC AST -> SDF3 AST
   */
  show-sdf3:
    (selected, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"sdf3.aterm")> path
    ; result   := <rename-sdf3-module(|path)> <yacc-to-sdf3> ast

  /**
   * Generate SDF3 files (.sdf3 files) for the YACC AST.
   *
   * @type YACC AST -> None
   */
  generate-sdf3:
    (selected, x, ast, path, project-path) -> (filename, result)
    with
      (_, resultAST) := <show-sdf3> (selected, x, ast, path, project-path)
    ; filename := <guarantee-extension(|"sdf3")> path
    ; result := <all-lines(trim-trailing-whitespace)> <pp-SDF3-string> resultAST

  generate-sdf3-file-trimmed:
    (selected, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"sdf3")> path
    ; result := <generate-sdf3-trimmed> ast

  generate-sdf3-trimmed:
    selected -> trimmed
    with
      (_, output) := <generate-sdf3> (selected, None(), selected, "test.yacc", <project-path>)
    ; trimmed     := <string-replace(|"\"", "\\\"")> output
