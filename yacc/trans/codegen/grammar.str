module codegen/grammar

imports

  nabl2/api
  libspoofax/stratego/debug
  codegen/-
  signatures/yacc-sig
  signatures/modules/-

rules

  /** @type YACC AST -> SDF3 AST */
  yacc-to-sdf3: Grammar(productionRules) -> Module(
      Unparameterized("test") // TODO rename module in build.str
    , []
    , [ SDFSection(
          ContextFreeSyntax(<map(rule-to-sdf3) ; concat> productionRules)
        )
      , SDFSection(
          LexicalSyntax( // TODO: lexical syntax should be parsable
            [ SdfProduction(
                SortDef("School")
              , Rhs(
                  [Iter(
                     CharClass(Simple(Present(Range(Short("A"), Short("Z")))))
                   )]
                )
              , NoAttrs()
              )
            , SdfProduction(
                SortDef("Group")
              , Rhs(
                  [ CharClass(Simple(Present(Range(Short("A"), Short("Z")))))
                  , CharClass(Simple(Present(Range(Short("0"), Short("9")))))
                  ]
                )
              , NoAttrs()
              )
            , SdfProduction(SortDef("Group"), Rhs([Lit("\"__\"")]), NoAttrs())
            , SdfProduction(
                SortDef("Module")
              , Rhs(
                  [ CharClass(Simple(Present(Range(Short("A"), Short("Z")))))
                  , CharClass(Simple(Present(Range(Short("A"), Short("Z")))))
                  , CharClass(Simple(Present(Range(Short("0"), Short("9")))))
                  , CharClass(Simple(Present(Range(Short("0"), Short("9")))))
                  , CharClass(Simple(Present(Range(Short("0"), Short("9")))))
                  , CharClass(Simple(Present(Range(Short("0"), Short("9")))))
                  ]
                )
              , NoAttrs()
              )
            , SdfProduction(
                SortDef("Module")
              , Rhs(
                  [ CharClass(Simple(Present(Range(Short("A"), Short("Z")))))
                  , CharClass(Simple(Present(Range(Short("A"), Short("Z")))))
                  , CharClass(Simple(Present(Range(Short("0"), Short("9")))))
                  , CharClass(Simple(Present(Range(Short("0"), Short("9")))))
                  , CharClass(Simple(Present(Range(Short("0"), Short("9")))))
                  ]
                )
              , NoAttrs()
              )
            , SdfProduction(
                SortDef("Name")
              , Rhs(
                  [ CharClass(Simple(Present(Range(Short("A"), Short("Z")))))
                  , CharClass(
                      Simple(
                        Present(
                          Conc(Range(Short("a"), Short("z")), Short("\\'"))
                        )
                      )
                    )
                  , IterStar(
                      CharClass(
                        Simple(
                          Present(
                            Conc(
                              Short("\\-")
                            , Conc(
                                Range(Short("A"), Short("Z"))
                              , Conc(Range(Short("a"), Short("z")), Short("\\,"))
                              )
                            )
                          )
                        )
                      )
                    )
                  ]
                )
              , NoAttrs()
              )
            , SdfProduction(
                Layout()
              , Rhs(
                  [ CharClass(
                      Simple(
                        Present(
                          Conc(Short("\\ "), Conc(Short("\\t"), Short("\\n")))
                        )
                      )
                    )
                  ]
                )
              , NoAttrs()
              )
            ]
          )
        )
      ]
    )

  /** @type Rule(ID, List(RHS)) -> List(""SdfProduction""??) */
  rule-to-sdf3: Rule(lhs, rhss) -> <map(rhs-to-sdf3(|lhs))> rhss

  /**
   * If RHS is empty, it produces an empty template line production.
   *
   * @type RHS(List(ID)) -> ""SdfProduction""??
   */
  rhs-to-sdf3(|lhs): RHS([]) -> TemplateProductionWithCons(
        SortCons(
          SortDef(<capitalize-string> lhs)
        , Constructor(<conc-strings> (
            <capitalize-string> lhs
          , <next-random; int-to-string>) // TODO instead of random, increment
          )
        )
      , Template([Line([])])
      , NoAttrs()
      )

  /**
   * If RHS is not empty, it produces an SDF production with a RHS.
   *
   * @type RHS(List(ID)) -> ""SdfProduction""??
   */
  rhs-to-sdf3(|lhs): RHS(rhsSymbols) -> SdfProductionWithCons(
        SortCons(
          SortDef(<capitalize-string> lhs)
        , Constructor(<conc-strings> (
            <capitalize-string> lhs
          , <next-random; int-to-string>) // TODO instead of random, increment
          )
        )
      , Rhs(<map(\ string -> Sort(<capitalize-string> string) \)> rhsSymbols)
      , NoAttrs()
      )

  /**
   * Capitalizes the first string of the character
   *
   * @type String -> String
   * @fails Never
   */
  capitalize-string: string -> res
    with [h|tail] := <explode-string> string
       ; derp := <if id then id else id end> h
       ; newH := <try(lower-to-uppercase)> h
       ; res := <implode-string> [newH|tail]

  /**
   * Changes a lowercase character code to its uppercase character code
   *
   * @type int -> int
   * @fails If character code is not a lowercase character
   */
  lower-to-uppercase: c -> u
    with b := <geq> (c, 97)
       ; d := <leq> (c, 122)
       ; u := <subti> (c, 32)
