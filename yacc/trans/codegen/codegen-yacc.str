module codegen/codegen-yacc

imports

  nabl2/api
  libspoofax/stratego/debug
  codegen/-
  signatures/yacc-sig
  signatures/modules/-

rules

  /** @type YACC AST -> SDF3 ContextFreeSyntax */
  yacc-to-sdf3: Grammar(definitions, productionRules, _) -> Module( // TODO take into account the definitions
      Unparameterized("test")
    , [Imports([Module(Unparameterized("test-lex"))])]
    , [ SDFSection(
          ContextFreeSyntax(<mapconcat(rule-to-sdf3)> productionRules)
        )
      ]
    )

  /** @type Rule(ID, List(RHS)) -> List(SdfProductionWithCons) */
  rule-to-sdf3: Rule(lhs, rhss) -> <map(rhs-to-sdf3(|lhs))> rhss

  /**
   * If RHS is empty, it produces an empty template line production.
   *
   * @type RHS(List(Identifier), prec, action) -> SdfProductionWithCons
   */
  rhs-to-sdf3(|lhs): RHS([], prec, _) -> SdfProductionWithCons(
        SortCons(
          SortDef(<capitalize-string> lhs)
        , Constructor(<conc-strings> (
            <capitalize-string> lhs
          , <next-random; int-to-string>) // TODO instead of random, increment (new-counter / next-counter?)
          )
        )
      , Rhs([Lit("\"\"")])
      , NoAttrs()
      )

  /**
   * If RHS is not empty, it produces an SDF production with a RHS.
   *
   * @type RHS(List(Identifier), prec, action) -> SdfProductionWithCons
   */
  rhs-to-sdf3(|lhs): RHS(rhsSymbols, prec, _) -> SdfProductionWithCons(
        SortCons(
          SortDef(<capitalize-string> lhs)
        , Constructor(<conc-strings> (
            <capitalize-string> lhs
          , <next-random; int-to-string>) // TODO instead of random, increment
          )
        )
      , Rhs(<map(identifier-to-sdf3)> rhsSymbols)
      , NoAttrs()
      )

  /**
   * @type Identifier -> sdf3.Sort | sdf3.Lit
   */
  identifier-to-sdf3: ID(str) -> Sort(<capitalize-string> str)
  identifier-to-sdf3: String(str) -> Lit(<debug2> str)
  identifier-to-sdf3: SQString(str) -> Lit(<debug1> <double-quote> <un-single-quote> str)

  /**
   * Capitalizes the first string of the character
   *
   * @type String -> String
   * @fails Never
   */
  capitalize-string: string -> res
    with [h|tail] := <explode-string> string
       ; newH := <to-upper> h
       ; res := <implode-string> [newH|tail]
