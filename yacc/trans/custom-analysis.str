module custom-analysis

imports

  libspoofax/stratego/debug

  nabl2/api

  codegen/codegen-yacc

rules

  /**
   * Elements of the input tuple are (resourceName, ast, custom-inital-result).
   * @type (String, ASTNode, ()) -> List((ASTNode, String))
   */
  nabl2-custom-analysis-unit-hook: (_, ast, _) -> <concat> [
        <get-unused-token-decls <+ ![]> ast
      , <get-unused-sort-decls <+ ![]> ast
      , <get-unused-prec-id-decls <+ ![]> ast
      , <get-unused-prec-str-decls <+ ![]> ast
      ]

  /**
   * Elements of the input tuple are (resourceName, custom-initial-result, custom-unit-results).
   * Elements of the return tuple are (errors, warnings, notes, custom-final-results).
   * @type (String, (), List(List((ASTNode, String)))) -> (List((ASTNode, String))*4)
   */
  nabl2-custom-analysis-final-hook(|a): (_, _, unit-results) -> ([], [], <flatten-list> unit-results, [])


strategies

  /** @type ASTNode -> List((ASTNode, String)) */
  get-unused-token-decls = ?ast
                           ; collect-all(\ RHS(rhsSymbols, _, _) -> rhsSymbols \)
                           ; flatten-list
                           ; filter(\ ID(i) -> i \)
                           ; ?list-of-token-usages // List of all ID tokens inside the Grammar
                           ; !ast
                           ; collect-all(\ Token(_, ids) -> ids \)
                           ; flatten-list // List of all %token declarations
                           ; filter({i: ?ID(i) ; !(i, list-of-token-usages) ; strip-annos
                                      ; not(elem) ; !(i, "Token is never used")})

  /** @type ASTNode -> List((ASTNode, String)) */
  get-unused-sort-decls = ?ast
                          ; collect-all(\ RHS(rhsSymbols, _, _) -> rhsSymbols \)
                          ; flatten-list
                          ; filter(\ ID(i) -> i \) // List of all ID tokens inside the Grammar + the start symbol
                          ; list-of-sort-usages := [<yacc-get-start-symbol> ast | <id>]
                          ; !ast
                          ; collect-all(\ Rule(lhs, _) -> lhs \) // List of all left-hand-sides
                          ; filter({i: ?i ; !(i, list-of-sort-usages) ; strip-annos
                                     ; not(elem) ; !(i, "Sort is never used")})

  /** @type ASTNode -> List((ASTNode, String)) */
  get-unused-prec-id-decls = ?ast
                             ; collect-all(\ Prec(ID(i)) -> i \)
                             ; ?list-of-prec-usages // List of all %prec ID statements inside the Grammar
                             ; !ast
                             ; collect-all({l: (?Left(_, l) <+ ?Right(_, l) <+ ?NonAssoc(_, l)) ; !l})
                             ; flatten-list // List of all %left/%right/%nonassoc declarations
                             ; filter({i: ?ID(i) ; !(i, list-of-prec-usages) ; strip-annos
                                        ; not(elem) ; !(i, "Precedence token is never used")})

  /** @type ASTNode -> List((ASTNode, String)) */
  get-unused-prec-str-decls = ?ast
                              ; collect-all(\ RHS(rhsSymbols, _, _) -> rhsSymbols \)
                              ; flatten-list
                              ; filter({i: (?String(i) <+ ?SQString(i)) ; !i})
                              ; ?list-of-prec-usages // List of all string tokens inside the Grammar
                              ; !ast
                              ; collect-all({l: (?Left(_, l) <+ ?Right(_, l) <+ ?NonAssoc(_, l)) ; !l})
                              ; flatten-list // List of all %left/%right/%nonassoc declarations
                              ; filter({i: (?String(i) <+ ?SQString(i)) ; !(i, list-of-prec-usages) ; strip-annos
                                         ; not(elem) ; !(i, "Precedence token is never used")})
